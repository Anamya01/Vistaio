"use strict";
// Copyright IBM Corp. 2020, 2024
Object.defineProperty(exports, "__esModule", { value: true });
const debug = require("debug");
function replaceVars(value, envvars, path = '') {
    if (!value) {
        return [value, 0];
    }
    let replacements = 0;
    if (Array.isArray(value)) {
        const processed = value.map((element, idx) => {
            const [processedElement, replacementsInElement] = replaceVars(element, envvars, `${path}[${idx}]`);
            replacements += replacementsInElement;
            return processedElement;
        });
        return replacements ? [processed, replacements] : [value, 0];
    }
    switch (typeof value) {
        case 'object': {
            const processed = Object.fromEntries(Object.entries(value).map(([key, value]) => {
                const [subtree, replacementsInSubtree] = replaceVars(value, envvars, `${path}.${key}`);
                replacements += replacementsInSubtree;
                return [key, subtree];
            }));
            return replacements ? [processed, replacements] : [value, 0];
        }
        case 'string': {
            if (envvars.hasOwnProperty(value)) {
                debug('stepzen:transpiler:config')(`replacing ${value} at path ${path}`);
                return [envvars[value], 1];
            }
        }
        default:
            return [value, 0];
    }
}
exports.default = async (config) => {
    const envvars = Object.keys(process.env)
        .filter(key => {
        return key.startsWith(`STEPZEN_`);
    })
        .reduce((obj, key) => {
        obj[key] = process.env[key];
        return obj;
    }, {});
    debug('stepzen:transpiler:config')(`STEPZEN_* env vars available for replacement:` +
        ` ${JSON.stringify(Object.keys(envvars), undefined, 2)}`);
    if (Object.entries(envvars).length === 0) {
        debug('stepzen:transpiler:config')(`nothing to replace, returning the config unchanged`);
        return config;
    }
    const [updated, replacements] = replaceVars(config, envvars);
    debug('stepzen:transpiler:config')(`total replacements made: ${replacements}`);
    return updated;
};
//# sourceMappingURL=envvars.js.map