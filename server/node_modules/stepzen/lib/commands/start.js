"use strict";
// Copyright IBM Corp. 2020, 2024
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const chokidar = require("chokidar");
const debug = require("debug");
const detect = require("detect-port");
const dotenv = require("dotenv");
const path = require("path");
const prettyMilliseconds = require("pretty-ms");
const core_1 = require("@oclif/core");
const errors_1 = require("@oclif/core/lib/errors");
const lodash_1 = require("lodash");
const deploy_1 = require("../commands/deploy");
const validate_1 = require("../commands/validate");
const constants_1 = require("../shared/constants");
const zen_command_1 = require("../shared/zen-command");
const utils_1 = require("../shared/utils");
const dashboard = require('@stepzen/graphiql-proxy');
const { version } = require('../../package.json');
class Start extends zen_command_1.default {
    async run() {
        const { flags } = await this.parse(Start);
        const { configuration } = await this.ensureStepZenAccount({
            nonInteractive: flags['non-interactive'],
        });
        if (flags['no-dashboard']) {
            this.warn(chalk `{bold --no-dashboard} is deprecated. Please use {bold --dashboard}={underline none} instead.`);
        }
        const graphiql = this.getGraphiQLType((0, utils_1.hasWebDashboard)(configuration), flags);
        // Get or create a StepZen workspace (possibly interactive)
        const workspace = await this.ensureStepZenWorkspace({
            directory: flags.dir,
            endpoint: flags.endpoint,
            nonInteractive: flags['non-interactive'],
        });
        // If the user has overridden the endpoint, apply the override
        if (flags.endpoint) {
            workspace.endpoint = flags.endpoint;
        }
        if (graphiql.type === 'local') {
            // Check the port is available
            const port = await detect(flags.port);
            if (flags.port !== port) {
                throw new errors_1.CLIError(`Could not start a local GraphiQL dashboard - port ${flags.port} is already in use`);
            }
        }
        const printEndpointDetailsOnce = (0, lodash_1.once)(() => {
            this.log((0, utils_1.formatEndpointInfo)({
                configuration,
                endpoint: workspace.endpoint,
                graphiql,
            }));
            this.log();
        });
        // This is the file watcher
        if (!flags['no-watcher']) {
            const redeploy = (0, lodash_1.debounce)((path) => {
                debug('stepzen:start')(`chokidar decected change to ${path}`);
                console.log(`File changed: ${chalk.blue((0, utils_1.workspaceRelative)(path, workspace.directory))}`);
                this.deployOnce({ workspace, flags }).then(didDeploy => {
                    didDeploy && printEndpointDetailsOnce();
                });
            }, 500);
            chokidar
                .watch(['**/*.graphql', 'config.yaml'], {
                cwd: workspace.schema,
                ignored: 'node_modules/**',
                ignoreInitial: true,
            })
                .on('change', redeploy)
                .on('add', redeploy)
                .on('unlink', redeploy);
            debug('stepzen:start')(`chokidar started watching ${workspace.schema}`);
        }
        // Unless explicitly disabled, auto-init
        let didDeploy = false;
        if (!flags['no-init']) {
            didDeploy = await this.deployOnce({ workspace, flags });
        }
        // Create the dashboard
        if (graphiql.type === 'local') {
            debug('stepzen:start')(`starting a local GraphiQL dashboard on ${flags.port}`);
            const ui = await dashboard({
                adminkey: configuration.adminkey,
                apikey: configuration.apikey,
                cli: {
                    version,
                },
                predicates: {
                    available: true,
                    enabled: false,
                    onTogglePredicates: async () => null,
                },
                port: flags.port,
                workspace,
                zenservUrl: (0, constants_1.getZenServUrl)(configuration),
            });
            await ui.start();
            debug('stepzen:start')(`local GraphiQL dashboard on ${flags.port} started`);
        }
        if (!flags['no-console']) {
            if (didDeploy) {
                printEndpointDetailsOnce();
            }
            if (!flags['no-watcher']) {
                console.log(`Watching ${chalk.blue((0, utils_1.homeRelative)(workspace.schema))} for changes...`);
            }
        }
    }
    async deployOnce({ workspace, flags, }) {
        debug('stepzen:dotenv')(`loading .env from ${workspace.directory},` +
            ` at cli/src/commands/start.ts`);
        dotenv.config({ path: path.join(workspace.directory, '.env') });
        if (!flags['no-validate']) {
            const validateCmd = `stepzen validate ${workspace.schema}`;
            try {
                debug('stepzen:start')(`starting $(${validateCmd})`);
                await validate_1.default.run([workspace.schema]);
                debug('stepzen:start')(`$(${validateCmd}) completed successfully`);
            }
            catch (error) {
                debug('stepzen:start')(`$(${validateCmd}) failed with`, error);
                console.log();
                console.log(chalk.red('Your local schema has the following GraphQL errors:'));
                console.log();
                console.log(error.message);
                return false;
            }
        }
        const logError = (error) => {
            try {
                const zenctlError = JSON.parse(error.message);
                const msg = zenctlError[0].message || zenctlError[0] || zenctlError;
                console.log('');
                console.log(chalk.red(msg));
            }
            catch {
                console.log('');
                console.log(chalk.red(error));
            }
        };
        const deployStart = new Date().getTime();
        core_1.ux.action.start(`Deploying ${chalk.yellow(workspace.endpoint)} to StepZen`);
        const deployCmdArgs = flags.endpoint ? [flags.endpoint] : [];
        deployCmdArgs.push('--dir', workspace.directory, '--silent');
        const deployCmd = `stepzen deploy '${deployCmdArgs.join("' '")}'`;
        try {
            debug('stepzen:start')(`starting $(${deployCmd})`);
            await deploy_1.default.run(deployCmdArgs);
            debug('stepzen:start')(`$(${deployCmd}) completed successfully`);
        }
        catch (error) {
            debug('stepzen:start')(`$(${deployCmd}) failed with`, error);
            core_1.ux.action.stop(chalk.red('fail'));
            logError(error);
            return false;
        }
        const deployEnd = new Date().getTime();
        const deployTime = deployEnd - deployStart;
        core_1.ux.action.stop(`${chalk.grey('done in')} ${prettyMilliseconds(deployTime)} ðŸš€`);
        return true;
    }
    getGraphiQLType(hasWebDashboard, flags) {
        if (flags['no-dashboard'] || flags.dashboard === 'none') {
            return {
                type: 'none',
            };
        }
        if (hasWebDashboard && flags.dashboard !== 'local') {
            return {
                type: 'web',
            };
        }
        if (flags.dashboard === 'web') {
            this.warn(chalk `{bold --dashboard}={underline web} is supported only when using the stepzen.net service instance.` +
                chalk `\n\tUsing {bold --dashboard}={underline local} instead.`);
            this.log();
        }
        return {
            type: 'local',
            port: flags.port,
        };
    }
}
exports.default = Start;
Start.description = 'Deploy your schema to StepZen, and then redeploy on every change.';
Start.flags = {
    ...zen_command_1.default.flags,
    dir: core_1.Flags.string({ description: 'Working directory' }),
    endpoint: core_1.Flags.string({ description: 'Override workspace endpoint' }),
    dashboard: core_1.Flags.string({
        description: 'Which GraphiQL dashboard to use to explore the deployed endpoint.' +
            chalk `\n\t- {bold web} [default]: use GraphiQL at dashboard.stepzen.com` +
            chalk `\n\t- {bold local}: start a local GraphiQL dashboard on localhost:5001 (change the port with the {bold --port} flag)` +
            chalk `\n\t- {bold none}: do not use GraphiQL at all`,
        options: ['web', 'local', 'none'],
    }),
    port: core_1.Flags.integer({
        description: chalk `Port for the local GraphiQL dashboard (when using {bold --dashboard}={underline local})`,
        default: 5001,
        env: 'PORT',
    }),
    'no-console': core_1.Flags.boolean({ hidden: true }),
    'no-dashboard': core_1.Flags.boolean({ hidden: true }),
    'no-init': core_1.Flags.boolean({ hidden: true }),
    'no-validate': core_1.Flags.boolean({ hidden: true }),
    'no-watcher': core_1.Flags.boolean({ hidden: true }),
};
//# sourceMappingURL=start.js.map