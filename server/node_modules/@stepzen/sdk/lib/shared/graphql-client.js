"use strict";
// Copyright IBM Corp. 2020, 2024
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchPublicAccountGraphQLQuery = exports.fetchZenCtlGraphQLQuery = exports.fetchGraphQLQuery = void 0;
const debug = require("debug");
const fetch_1 = require("@stepzen/fetch");
const request_1 = require("./request");
const fetchGraphQLQuery = async ({ url, query, variables = {}, operationName, headers = {}, }) => {
    debug('stepzen:sdk:url')(url);
    debug('stepzen:sdk:headers')(headers);
    debug('stepzen:sdk:query')(query);
    debug('stepzen:sdk:variables')(JSON.stringify(variables));
    if (operationName) {
        debug('stepzen:sdk:operationName')(operationName);
    }
    const body = {
        query,
        variables,
        operationName,
    };
    try {
        const startTime = Date.now();
        const response = await (0, fetch_1.default)(url, {
            method: 'POST',
            headers: {
                'content-type': 'application/json',
                ...headers,
            },
            body: JSON.stringify(body),
        });
        const endTime = Date.now();
        if (response.status !== 200) {
            throw new Error(`Unexpected HTTP status ${response.status}` +
                ` from the GraphQL endpoint '${url}' (expected 200)`);
        }
        const json = await response.json();
        debug('stepzen:sdk:response')(JSON.stringify(json));
        // trace is a JSON readable summation in a single line; eventually allow stepzen request to return this directly?
        debug('stepzen:sdk:trace')(JSON.stringify({
            request: body,
            response: json,
            // added information
            metadata: {
                elapsedMilliseconds: endTime - startTime,
            },
        }));
        const { data, errors, extensions } = json;
        if (errors) {
            return { data, errors, extensions };
        }
        else if (data) {
            return { data, errors: undefined, extensions };
        }
        throw new Error(`Unexpected response structure from the GraphQL endpoint '${url}'` +
            ` (expected {data, errors}, recieved ${JSON.stringify(json)})`);
    }
    catch (error) {
        debug('stepzen:sdk:response')(`Failed to fetch from a GraphQL API`, error);
        throw error;
    }
};
exports.fetchGraphQLQuery = fetchGraphQLQuery;
const fetchZenCtlGraphQLQuery = async ({ account, adminKey, deploymentType, query, variables = {}, sdkConfig, }) => {
    try {
        return (await (0, exports.fetchGraphQLQuery)({
            url: sdkConfig.zenctlApiUrl,
            query,
            variables,
            headers: {
                'user-agent': (0, request_1.getUserAgent)(sdkConfig),
            },
        }));
    }
    catch (error) {
        throw new Error(`Failed to connect to ZenCtl API. ${error}`);
    }
};
exports.fetchZenCtlGraphQLQuery = fetchZenCtlGraphQLQuery;
const fetchPublicAccountGraphQLQuery = async ({ url, query, variables = {}, sdkConfig, }) => {
    try {
        return (await (0, exports.fetchGraphQLQuery)({
            url,
            query,
            variables,
            headers: {
                'user-agent': (0, request_1.getUserAgent)(sdkConfig),
            },
        }));
    }
    catch (error) {
        throw new Error(`Failed to connect to Public Account API. ${error}`);
    }
};
exports.fetchPublicAccountGraphQLQuery = fetchPublicAccountGraphQLQuery;
//# sourceMappingURL=graphql-client.js.map