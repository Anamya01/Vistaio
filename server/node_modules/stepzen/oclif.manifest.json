{
  "version": "0.36.1",
  "commands": {
    "delete": {
      "id": "delete",
      "description": "Delete an endpoint from your StepZen account.",
      "strict": true,
      "pluginName": "stepzen",
      "pluginAlias": "stepzen",
      "pluginType": "core",
      "aliases": [],
      "flags": {
        "help": {
          "name": "help",
          "type": "boolean",
          "char": "h",
          "description": "Show CLI help",
          "allowNo": false
        },
        "non-interactive": {
          "name": "non-interactive",
          "type": "boolean",
          "description": "Disable all interactive prompts",
          "allowNo": false
        }
      },
      "args": {
        "endpoint": {
          "name": "endpoint",
          "description": "name of the endpoint (e.g. api/customers)",
          "required": true
        }
      }
    },
    "deploy": {
      "id": "deploy",
      "description": "Deploy to StepZen.",
      "strict": true,
      "usage": "deploy [ENDPOINT] [--config=path/to/config.yaml] [--dir=path/to/workspace]\n\n-- OR (deprecated) --\n\n$ stepzen deploy ENDPOINT --schema=schema [--configurationsets=cs1[,cs2[,..]]]",
      "pluginName": "stepzen",
      "pluginAlias": "stepzen",
      "pluginType": "core",
      "aliases": [],
      "flags": {
        "help": {
          "name": "help",
          "type": "boolean",
          "char": "h",
          "description": "Show CLI help",
          "allowNo": false
        },
        "non-interactive": {
          "name": "non-interactive",
          "type": "boolean",
          "description": "Disable all interactive prompts",
          "allowNo": false
        },
        "dir": {
          "name": "dir",
          "type": "option",
          "description": "Working directory",
          "multiple": false
        },
        "silent": {
          "name": "silent",
          "type": "boolean",
          "allowNo": false
        },
        "configurationsets": {
          "name": "configurationsets",
          "type": "option",
          "description": "\n        Name(s) of configuration sets uploaded earlier with stepzen upload\n        [DEPRECATED: this flag will be removed in future versions]\n        \n        Instead, please use one of these options:\n        - stepzen deploy (without the --configurationsets flag)\n        \tto use the configuration from the config.yaml file in the current directory (if exists)\n        - stepzen deploy --config path/to/config.yaml\n        \tto explicitly specify the configuration file",
          "multiple": false,
          "exclusive": [
            "config",
            "dir"
          ]
        },
        "config": {
          "name": "config",
          "type": "option",
          "description": "[default: config.yaml] Configuration file to use (relative to the current directory)",
          "helpValue": "path/to/config.yaml",
          "multiple": false
        },
        "schema": {
          "name": "schema",
          "type": "option",
          "description": "\n        Name of a schema uploaded earlier with stepzen upload\n        [DEPRECATED: this flag will be removed in future versions]\n        \n        Instead, please use one of these options:\n         - stepzen deploy (without the --schema flag)\n        \tto deploy the schema from a StepZen workspace in your current directory\n         - stepzen deploy --dir path/to/workspace\n        \tto deploy from a StepZen workspace in another folder",
          "multiple": false,
          "exclusive": [
            "config",
            "dir"
          ]
        }
      },
      "args": {
        "endpoint": {
          "name": "endpoint",
          "description": "name of the endpoint (e.g. api/customers)\n        [default: use the endpoint property from stepzen.config.json]",
          "required": false
        }
      }
    },
    "init": {
      "id": "init",
      "description": "Initialize a StepZen workspace in the current directory.",
      "strict": true,
      "pluginName": "stepzen",
      "pluginAlias": "stepzen",
      "pluginType": "core",
      "aliases": [],
      "flags": {
        "help": {
          "name": "help",
          "type": "boolean",
          "char": "h",
          "description": "Show CLI help",
          "allowNo": false
        },
        "non-interactive": {
          "name": "non-interactive",
          "type": "boolean",
          "description": "Disable all interactive prompts",
          "allowNo": false
        },
        "endpoint": {
          "name": "endpoint",
          "type": "option",
          "description": "Endpoint name (e.g. api/myapp)",
          "multiple": false
        },
        "yes": {
          "name": "yes",
          "type": "boolean",
          "description": "Accept default answers to interactive prompts",
          "allowNo": false
        }
      },
      "args": {
        "directory": {
          "name": "directory",
          "hidden": true
        }
      }
    },
    "lint": {
      "id": "lint",
      "description": "StepZen lint.",
      "strict": true,
      "pluginName": "stepzen",
      "pluginAlias": "stepzen",
      "pluginType": "core",
      "hidden": true,
      "aliases": [],
      "flags": {
        "help": {
          "name": "help",
          "type": "boolean",
          "char": "h",
          "description": "Show CLI help",
          "allowNo": false
        },
        "non-interactive": {
          "name": "non-interactive",
          "type": "boolean",
          "description": "Disable all interactive prompts",
          "allowNo": false
        },
        "dir": {
          "name": "dir",
          "type": "option",
          "hidden": true,
          "multiple": false
        }
      },
      "args": {}
    },
    "list": {
      "id": "list",
      "description": "List endpoints, schemas and configuration sets in your StepZen account.\nAll timestamps displayed by stepzen list endpoints are in your local time zone.",
      "strict": true,
      "pluginName": "stepzen",
      "pluginAlias": "stepzen",
      "pluginType": "core",
      "aliases": [],
      "flags": {
        "help": {
          "name": "help",
          "type": "boolean",
          "char": "h",
          "description": "Show CLI help",
          "allowNo": false
        },
        "non-interactive": {
          "name": "non-interactive",
          "type": "boolean",
          "description": "Disable all interactive prompts",
          "allowNo": false
        }
      },
      "args": {
        "type": {
          "name": "type",
          "description": "\n        \n        The type of entities to list:\n        \tendpoints - GraphQL API endpoints deployed with stepzen deploy (or stepzen start)\n        \tschemas [DEPRECATED] - StepZen schemas uploaded with stepzen upload (or stepzen start)\n        \tconfigurationsets [DEPRECATED] - StepZen configuration sets uploaded with stepzen upload (or stepzen start)",
          "options": [
            "endpoints",
            "configurationsets",
            "schemas"
          ],
          "default": "endpoints"
        }
      }
    },
    "login": {
      "id": "login",
      "description": "Log in to StepZen.",
      "strict": true,
      "pluginName": "stepzen",
      "pluginAlias": "stepzen",
      "pluginType": "core",
      "aliases": [],
      "flags": {
        "help": {
          "name": "help",
          "type": "boolean",
          "char": "h",
          "description": "Show CLI help",
          "allowNo": false
        },
        "non-interactive": {
          "name": "non-interactive",
          "type": "boolean",
          "description": "Disable all interactive prompts",
          "allowNo": false
        },
        "account": {
          "name": "account",
          "type": "option",
          "char": "a",
          "description": "StepZen account name (copy from https://stepzen.com/account). If not provided, the CLI prompts the users to enter one.",
          "multiple": false,
          "exclusive": [
            "config",
            "public"
          ]
        },
        "adminkey": {
          "name": "adminkey",
          "type": "option",
          "char": "k",
          "description": "Admin key (copy from https://stepzen.com/account) If not provided, the CLI prompts the users to enter one.",
          "multiple": false,
          "exclusive": [
            "config",
            "public"
          ]
        },
        "public": {
          "name": "public",
          "type": "boolean",
          "description": "Create a public anonymous StepZen account and use it. This is handy for trying StepZen out, but it not suitable for handling private data as all endpoints created with a public account will be public.",
          "allowNo": false,
          "exclusive": [
            "config",
            "account",
            "adminkey"
          ]
        },
        "introspection": {
          "name": "introspection",
          "type": "option",
          "description": "Override the default StepZen introspection service URL for all stepzen import commands. If not provided, use the default introspection URL.\n\nExample:\nstepzen login --introspection stepzen-introspection.mydomain.com",
          "multiple": false
        },
        "config": {
          "name": "config",
          "type": "option",
          "hidden": true,
          "multiple": false,
          "exclusive": [
            "account",
            "adminkey",
            "public"
          ]
        }
      },
      "args": {
        "domain": {
          "name": "domain",
          "description": "Domain of the StepZen service to login to (e.g. stepzen.acme.com). If no domain is provided, stepzen.net is used by default.",
          "required": false
        }
      }
    },
    "logout": {
      "id": "logout",
      "description": "Log out of StepZen.",
      "strict": true,
      "pluginName": "stepzen",
      "pluginAlias": "stepzen",
      "pluginType": "core",
      "aliases": [],
      "flags": {
        "help": {
          "name": "help",
          "type": "boolean",
          "char": "h",
          "description": "Show CLI help",
          "allowNo": false
        },
        "non-interactive": {
          "name": "non-interactive",
          "type": "boolean",
          "description": "Disable all interactive prompts",
          "allowNo": false
        }
      },
      "args": {}
    },
    "request": {
      "id": "request",
      "description": "Send a GraphQL request to a StepZen endpoint and print the response, using the API key and the target endpoint from the current StepZen workspace.",
      "strict": true,
      "pluginName": "stepzen",
      "pluginAlias": "stepzen",
      "pluginType": "core",
      "aliases": [],
      "flags": {
        "help": {
          "name": "help",
          "type": "boolean",
          "char": "h",
          "description": "Show CLI help",
          "allowNo": false
        },
        "non-interactive": {
          "name": "non-interactive",
          "type": "boolean",
          "description": "Disable all interactive prompts",
          "allowNo": false
        },
        "dir": {
          "name": "dir",
          "type": "option",
          "description": "StepZen workspace directory (defaults to the current directory)",
          "multiple": false,
          "exclusive": [
            "endpoint"
          ]
        },
        "endpoint": {
          "name": "endpoint",
          "type": "option",
          "description": "StepZen endpoint to call (defaults to the endpoint in current StepZen workspace)",
          "multiple": false,
          "exclusive": [
            "dir"
          ]
        },
        "header": {
          "name": "header",
          "type": "option",
          "char": "H",
          "description": "Add an additional HTTP header to the request. This is useful for schemas where @rest or @graphql directives enable header forwarding with forwardheaders.\n\nExample:\nstepzen request '{ user(id: \"u123\") { email } }' \\\n\t-H \"X-API-Token: SecretAPIToken\"\n\nUse the -H \"Header-Name:\" syntax to drop a default header, and the -H \"Header-Name;\" syntax to send a header with an empty value.",
          "multiple": true
        },
        "operation-name": {
          "name": "operation-name",
          "type": "option",
          "description": "Specify the operation name (in case if the provided query includes multiple operations)",
          "multiple": false
        },
        "var": {
          "name": "var",
          "type": "option",
          "description": "Add a request variable, in the name=value format.\n\nExample:\nstepzen request 'query OrdersQuery($search: String!, $limit: Int) {\n\t\torders(search: $search, limit: $limit) { id createdAt }\n\t}' \\\n\t--var 'search=space ninja' \\\n\t--var limit=5",
          "multiple": true
        },
        "var-file": {
          "name": "var-file",
          "type": "option",
          "description": "Read request variables from a JSON file. In case when the same variable value is provided both via --var-file and --var, the priority is given to the latter.\n\nExample:\nstepzen request 'query OrdersQuery($search: String!, $limit: Int) {\n\t\torders(search: $search, limit: $limit) { id createdAt }\n\t}' \\\n\t--var-file ./vars.json",
          "multiple": false
        },
        "file": {
          "name": "file",
          "type": "option",
          "char": "f",
          "description": "Read the query text from a file instead of the command line.\n\nExample:\nstepzen request -f query.graphql",
          "multiple": false
        }
      },
      "args": {
        "query": {
          "name": "query",
          "description": "GraphQL query (could include a query, a mutation or a subscription).\nThis argument is required unless you provide the query as a file with --file=file."
        }
      }
    },
    "service": {
      "id": "service",
      "description": "Manage the local StepZen service instance (requires Docker).\nYou can use a local StepZen service instance instead of the StepZen cloud to develop and test GraphQL endpoints locally. This way you can try StepZen out without giving the StepZen cloud access to your data sources and API endpoints.\n\nLocal StepZen service instances are not suitable for production use. Please refer to the documentation at https://stepzen.com/docs/deployment/local-docker for more information and examples.",
      "strict": true,
      "pluginName": "stepzen",
      "pluginAlias": "stepzen",
      "pluginType": "core",
      "aliases": [],
      "flags": {
        "help": {
          "name": "help",
          "type": "boolean",
          "char": "h",
          "description": "Show CLI help",
          "allowNo": false
        },
        "non-interactive": {
          "name": "non-interactive",
          "type": "boolean",
          "description": "Disable all interactive prompts",
          "allowNo": false
        },
        "dsn": {
          "name": "dsn",
          "type": "option",
          "description": "DSN of a StepZen metadata database, e.g. postgres://user:password@172.17.0.1:5432/zenctl",
          "multiple": false,
          "exclusive": [
            "reset-auto",
            "prompt"
          ]
        },
        "reset-auto": {
          "name": "reset-auto",
          "type": "boolean",
          "description": "Create fresh empty metadata database. Note: all existing endpoints will be deleted and you will be logged out.",
          "allowNo": false,
          "exclusive": [
            "dsn",
            "prompt"
          ]
        },
        "prompt": {
          "name": "prompt",
          "type": "boolean",
          "description": "Opens an interactive prompt to ask for database details (or fails, if running in a non-interactive mode).",
          "allowNo": false,
          "exclusive": [
            "dsn",
            "non-interactive"
          ]
        },
        "port": {
          "name": "port",
          "type": "option",
          "description": "Override the TCP port on which the local StepZen service instance will listen for connections (port 9000 by default).",
          "multiple": false
        }
      },
      "args": {
        "action": {
          "name": "action",
          "description": "\n        \tstart\tstart a local StepZen service instance in a Docker container\n        \t\tThis command pulls the latest StepZen service instance Docker image so that the\n        \t\tversion of StepZen you run locally is the same as the one running on\n        \t\tstepzen.net.\n        \n        \tstop\tstop the local StepZen service instance (if running)\n        \t\tThis command deletes the Docker container with the StepZen service instance,\n        \t\tbut all your endpoints are persistently stored in the metadata database. They\n        \t\tremain available when running stepzen service start next time.\n        \n        \tupgrade\tupgrade the local StepZen service instance if it is running\n        \t\tThis command checks if a newer version of the StepZen service instance Docker\n        \t\timage is available, and if it is then stops and deletes the currently running\n        \t\tcontainer, pulls the latest image, and starts it. All endpoints are preserved.\n\n        If no action is provided, print the service status and exit.",
          "required": false,
          "options": [
            "start",
            "stop",
            "upgrade"
          ]
        }
      }
    },
    "start": {
      "id": "start",
      "description": "Deploy your schema to StepZen, and then redeploy on every change.",
      "strict": true,
      "pluginName": "stepzen",
      "pluginAlias": "stepzen",
      "pluginType": "core",
      "aliases": [],
      "flags": {
        "help": {
          "name": "help",
          "type": "boolean",
          "char": "h",
          "description": "Show CLI help",
          "allowNo": false
        },
        "non-interactive": {
          "name": "non-interactive",
          "type": "boolean",
          "description": "Disable all interactive prompts",
          "allowNo": false
        },
        "dir": {
          "name": "dir",
          "type": "option",
          "description": "Working directory",
          "multiple": false
        },
        "endpoint": {
          "name": "endpoint",
          "type": "option",
          "description": "Override workspace endpoint",
          "multiple": false
        },
        "dashboard": {
          "name": "dashboard",
          "type": "option",
          "description": "Which GraphiQL dashboard to use to explore the deployed endpoint.\n\t- web [default]: use GraphiQL at dashboard.stepzen.com\n\t- local: start a local GraphiQL dashboard on localhost:5001 (change the port with the --port flag)\n\t- none: do not use GraphiQL at all",
          "multiple": false,
          "options": [
            "web",
            "local",
            "none"
          ]
        },
        "port": {
          "name": "port",
          "type": "option",
          "description": "Port for the local GraphiQL dashboard (when using --dashboard=local)",
          "multiple": false,
          "default": 5001
        },
        "no-console": {
          "name": "no-console",
          "type": "boolean",
          "hidden": true,
          "allowNo": false
        },
        "no-dashboard": {
          "name": "no-dashboard",
          "type": "boolean",
          "hidden": true,
          "allowNo": false
        },
        "no-init": {
          "name": "no-init",
          "type": "boolean",
          "hidden": true,
          "allowNo": false
        },
        "no-validate": {
          "name": "no-validate",
          "type": "boolean",
          "hidden": true,
          "allowNo": false
        },
        "no-watcher": {
          "name": "no-watcher",
          "type": "boolean",
          "hidden": true,
          "allowNo": false
        }
      },
      "args": {}
    },
    "transpile": {
      "id": "transpile",
      "description": "Transpile a GraphQL schema.",
      "strict": true,
      "pluginName": "stepzen",
      "pluginAlias": "stepzen",
      "pluginType": "core",
      "hidden": true,
      "aliases": [],
      "flags": {
        "help": {
          "name": "help",
          "type": "boolean",
          "char": "h",
          "description": "Show CLI help",
          "allowNo": false
        },
        "non-interactive": {
          "name": "non-interactive",
          "type": "boolean",
          "description": "Disable all interactive prompts",
          "allowNo": false
        },
        "config": {
          "name": "config",
          "type": "option",
          "hidden": true,
          "multiple": false
        },
        "hide-output": {
          "name": "hide-output",
          "type": "boolean",
          "hidden": true,
          "allowNo": false
        },
        "inspect": {
          "name": "inspect",
          "type": "boolean",
          "char": "i",
          "hidden": true,
          "allowNo": false
        },
        "inspect-after": {
          "name": "inspect-after",
          "type": "boolean",
          "hidden": true,
          "allowNo": false
        },
        "output-configuration": {
          "name": "output-configuration",
          "type": "boolean",
          "allowNo": false
        },
        "silent": {
          "name": "silent",
          "type": "boolean",
          "allowNo": false
        }
      },
      "args": {
        "folder": {
          "name": "folder",
          "required": true
        }
      }
    },
    "upload": {
      "id": "upload",
      "description": "[DEPRECATED] Upload a schema or a configuration set to StepZen.\nstepzen upload is deprecated in favor of stepzen deploy\nStepZen CLI is moving away from a two-step \"upload\" + \"deploy\" flow to a single-step \"deploy\" flow.",
      "strict": true,
      "pluginName": "stepzen",
      "pluginAlias": "stepzen",
      "pluginType": "core",
      "aliases": [],
      "flags": {
        "help": {
          "name": "help",
          "type": "boolean",
          "char": "h",
          "description": "Show CLI help",
          "allowNo": false
        },
        "non-interactive": {
          "name": "non-interactive",
          "type": "boolean",
          "description": "Disable all interactive prompts",
          "allowNo": false
        },
        "dir": {
          "name": "dir",
          "type": "option",
          "description": "A directory to upload",
          "multiple": false,
          "exclusive": [
            "file"
          ]
        },
        "file": {
          "name": "file",
          "type": "option",
          "description": "A file to upload",
          "multiple": false,
          "exclusive": [
            "dir"
          ]
        },
        "silent": {
          "name": "silent",
          "type": "boolean",
          "allowNo": false
        }
      },
      "args": {
        "type": {
          "name": "type",
          "description": "type",
          "required": true,
          "options": [
            "configurationset",
            "schema"
          ]
        },
        "destination": {
          "name": "destination",
          "description": "destination",
          "required": true
        }
      }
    },
    "validate": {
      "id": "validate",
      "description": "Validate a GraphQL schema.",
      "strict": true,
      "pluginName": "stepzen",
      "pluginAlias": "stepzen",
      "pluginType": "core",
      "hidden": true,
      "aliases": [],
      "flags": {
        "help": {
          "name": "help",
          "type": "boolean",
          "char": "h",
          "description": "Show CLI help",
          "allowNo": false
        },
        "non-interactive": {
          "name": "non-interactive",
          "type": "boolean",
          "description": "Disable all interactive prompts",
          "allowNo": false
        }
      },
      "args": {
        "folder": {
          "name": "folder",
          "required": true
        }
      }
    },
    "whoami": {
      "id": "whoami",
      "description": "View your StepZen credentials.",
      "strict": true,
      "pluginName": "stepzen",
      "pluginAlias": "stepzen",
      "pluginType": "core",
      "aliases": [],
      "flags": {
        "help": {
          "name": "help",
          "type": "boolean",
          "char": "h",
          "description": "Show CLI help",
          "allowNo": false
        },
        "non-interactive": {
          "name": "non-interactive",
          "type": "boolean",
          "description": "Disable all interactive prompts",
          "allowNo": false
        },
        "showkeys": {
          "name": "showkeys",
          "type": "boolean",
          "allowNo": false,
          "exclusive": [
            "account",
            "adminkey",
            "apikey",
            "domain"
          ]
        },
        "account": {
          "name": "account",
          "type": "boolean",
          "allowNo": false,
          "exclusive": [
            "showkeys",
            "adminkey",
            "apikey",
            "domain"
          ]
        },
        "adminkey": {
          "name": "adminkey",
          "type": "boolean",
          "allowNo": false,
          "exclusive": [
            "showkeys",
            "account",
            "apikey",
            "domain"
          ]
        },
        "apikey": {
          "name": "apikey",
          "type": "boolean",
          "allowNo": false,
          "exclusive": [
            "showkeys",
            "account",
            "adminkey",
            "domain"
          ]
        },
        "domain": {
          "name": "domain",
          "type": "boolean",
          "allowNo": false,
          "exclusive": [
            "showkeys",
            "account",
            "adminkey",
            "apikey"
          ]
        }
      },
      "args": {}
    },
    "import:curl": {
      "id": "import:curl",
      "description": "Import a schema for a REST endpoint into your GraphQL API (uses the curl syntax).\n\nstepzen import curl automatically introspects a REST endpoint, generates a GraphQL schema for accessing this endpoint through a StepZen API, and adds the generated types and a query field into your GraphQL schema.",
      "strict": false,
      "pluginName": "stepzen",
      "pluginAlias": "stepzen",
      "pluginType": "core",
      "aliases": [],
      "flags": {
        "help": {
          "name": "help",
          "type": "boolean",
          "char": "h",
          "description": "Show CLI help",
          "allowNo": false
        },
        "non-interactive": {
          "name": "non-interactive",
          "type": "boolean",
          "description": "Disable all interactive prompts",
          "allowNo": false
        },
        "dir": {
          "name": "dir",
          "type": "option",
          "description": "Working directory",
          "multiple": false
        },
        "silent": {
          "name": "silent",
          "type": "boolean",
          "description": "This is an internal flag passed by the (no-arg) Import command when it launches a data-source specific import command. The intent is to avoid showing a welcome message twice (if its already been shown by the (no-arg) Import command).",
          "hidden": true,
          "allowNo": false
        },
        "name": {
          "name": "name",
          "type": "option",
          "description": "Subfolder inside the workspace folder to save the imported schema files to. Defaults to the name of the imported schema.",
          "multiple": false
        },
        "overwrite": {
          "name": "overwrite",
          "type": "boolean",
          "description": "Overwrite any existing schema with the same name. Cannot be used without also providing a --name flag.",
          "hidden": true,
          "allowNo": false,
          "dependsOn": [
            "name"
          ]
        },
        "prefix": {
          "name": "prefix",
          "type": "option",
          "description": "Prefix to add to every type in the generated schema",
          "multiple": false
        },
        "data": {
          "name": "data",
          "type": "option",
          "char": "d",
          "hidden": true,
          "multiple": true,
          "aliases": [
            "data-ascii",
            "data-raw",
            "data-binary"
          ]
        },
        "request": {
          "name": "request",
          "type": "option",
          "char": "X",
          "hidden": true,
          "multiple": false
        },
        "url": {
          "name": "url",
          "type": "option",
          "hidden": true,
          "multiple": true
        },
        "header": {
          "name": "header",
          "type": "option",
          "char": "H",
          "description": "Specifies a request header to pass\n\nExample:\nstepzen import curl https://example.com/api/customers \\\n\t-H \"Authorization: apikey SecretAPIKeyValue\"",
          "multiple": true
        },
        "header-param": {
          "name": "header-param",
          "type": "option",
          "description": "Specifies a parameter in a header value. Can be formed by taking a -H, --header flag and replacing the variable part of the header value with a $paramName placeholder. Repeat this flag once for each header with a parameter.\n\nExample:\nstepzen import curl https://example.com/api/customers \\\n\t-H \"Authorization: apikey SecretAPIKeyValue\" \\\n\t--header-param 'Authorization: apikey $apikey'",
          "multiple": true
        },
        "query-name": {
          "name": "query-name",
          "type": "option",
          "description": "Property name to add to the Query type as a way to access the imported endpoint",
          "multiple": false
        },
        "query-type": {
          "name": "query-type",
          "type": "option",
          "description": "Name for the type returned by the curl request in the generated schema. The name specified by --query-type is not prefixed by --prefix if both flags are present.",
          "multiple": false
        },
        "path-params": {
          "name": "path-params",
          "type": "option",
          "description": "Specifies path parameters in the URL path. Can be formed by taking the original path and replacing the variable segments with $paramName placeholders.\n\nExample:\nstepzen import curl https://example.com/users/jane/posts/12 --path-params '/users/$userId/posts/$postId'",
          "multiple": false
        }
      },
      "args": {}
    },
    "import:flow": {
      "id": "import:flow",
      "description": "Import StepZen flow expression as a query field into your GraphQL API.\n\nstepzen import flow automatically introspects a GraphQL endpoint and adds a @sequence implementing the given flow expression into your GraphQL schema.",
      "strict": true,
      "pluginName": "stepzen",
      "pluginAlias": "stepzen",
      "pluginType": "core",
      "aliases": [],
      "flags": {
        "help": {
          "name": "help",
          "type": "boolean",
          "char": "h",
          "description": "Show CLI help",
          "allowNo": false
        },
        "non-interactive": {
          "name": "non-interactive",
          "type": "boolean",
          "description": "Disable all interactive prompts",
          "allowNo": false
        },
        "dir": {
          "name": "dir",
          "type": "option",
          "description": "Working directory",
          "multiple": false
        },
        "silent": {
          "name": "silent",
          "type": "boolean",
          "description": "This is an internal flag passed by the (no-arg) Import command when it launches a data-source specific import command. The intent is to avoid showing a welcome message twice (if its already been shown by the (no-arg) Import command).",
          "hidden": true,
          "allowNo": false
        },
        "name": {
          "name": "name",
          "type": "option",
          "description": "Subfolder inside the workspace folder to save the imported schema files to. Defaults to the name of the imported schema.",
          "multiple": false
        },
        "overwrite": {
          "name": "overwrite",
          "type": "boolean",
          "description": "Overwrite any existing schema with the same name. Cannot be used without also providing a --name flag.",
          "hidden": true,
          "allowNo": false,
          "dependsOn": [
            "name"
          ]
        },
        "header": {
          "name": "header",
          "type": "option",
          "char": "H",
          "description": "Specifies a request header to pass\n\nExample:\nstepzen import curl https://example.com/api/customers \\\n\t-H \"Authorization: apikey SecretAPIKeyValue\"",
          "multiple": true,
          "dependsOn": [
            "endpoint"
          ]
        },
        "endpoint": {
          "name": "endpoint",
          "type": "option",
          "description": "Use a custom GraphQL schema instead of the project's schema as the schema providing the steps in the flow.",
          "multiple": false
        }
      },
      "args": {
        "flow": {
          "name": "flow"
        }
      }
    },
    "import:graphql": {
      "id": "import:graphql",
      "description": "Import a GraphQL API as a subgraph into your GraphQL API.\n\nstepzen import graphql automatically introspects a GraphQL endpoint and merges the types, queries, mutations and subscriptions for accessing this endpoint through a StepZen API into your GraphQL schema.",
      "strict": true,
      "pluginName": "stepzen",
      "pluginAlias": "stepzen",
      "pluginType": "core",
      "aliases": [],
      "flags": {
        "help": {
          "name": "help",
          "type": "boolean",
          "char": "h",
          "description": "Show CLI help",
          "allowNo": false
        },
        "non-interactive": {
          "name": "non-interactive",
          "type": "boolean",
          "description": "Disable all interactive prompts",
          "allowNo": false
        },
        "dir": {
          "name": "dir",
          "type": "option",
          "description": "Working directory",
          "multiple": false
        },
        "silent": {
          "name": "silent",
          "type": "boolean",
          "description": "This is an internal flag passed by the (no-arg) Import command when it launches a data-source specific import command. The intent is to avoid showing a welcome message twice (if its already been shown by the (no-arg) Import command).",
          "hidden": true,
          "allowNo": false
        },
        "name": {
          "name": "name",
          "type": "option",
          "description": "Subfolder inside the workspace folder to save the imported schema files to. Defaults to the name of the imported schema.",
          "multiple": false
        },
        "overwrite": {
          "name": "overwrite",
          "type": "boolean",
          "description": "Overwrite any existing schema with the same name. Cannot be used without also providing a --name flag.",
          "hidden": true,
          "allowNo": false,
          "dependsOn": [
            "name"
          ]
        },
        "prefix": {
          "name": "prefix",
          "type": "option",
          "description": "Prefix to add to every type in the generated schema",
          "multiple": false
        },
        "header": {
          "name": "header",
          "type": "option",
          "char": "H",
          "description": "Specifies a request header to pass\n\nExample:\nstepzen import curl https://example.com/api/customers \\\n\t-H \"Authorization: apikey SecretAPIKeyValue\"",
          "multiple": true
        },
        "header-param": {
          "name": "header-param",
          "type": "option",
          "description": "Specifies a parameter in a header value. Can be formed by taking a -H, --header flag and replacing the variable part of the header value with a $paramName placeholder. Repeat this flag once for each header with a parameter.\n\nExample:\nstepzen import curl https://example.com/api/customers \\\n\t-H \"Authorization: apikey SecretAPIKeyValue\" \\\n\t--header-param 'Authorization: apikey $apikey'",
          "multiple": true
        }
      },
      "args": {
        "url": {
          "name": "url"
        }
      }
    },
    "import": {
      "id": "import",
      "description": "Import a schema for an external data source or an API endpoint into your GraphQL API.\nSee more details with stepzen import [SOURCE] --help",
      "strict": true,
      "pluginName": "stepzen",
      "pluginAlias": "stepzen",
      "pluginType": "core",
      "aliases": [],
      "flags": {
        "help": {
          "name": "help",
          "type": "boolean",
          "char": "h",
          "description": "Show CLI help",
          "allowNo": false
        },
        "non-interactive": {
          "name": "non-interactive",
          "type": "boolean",
          "description": "Disable all interactive prompts",
          "allowNo": false
        },
        "dir": {
          "name": "dir",
          "type": "option",
          "description": "Working directory",
          "multiple": false
        }
      },
      "args": {
        "source": {
          "name": "source",
          "description": "kind of the data source: curl, graphql, mysql, postgresql, snowflake (or a full DSN string)"
        }
      }
    },
    "import:mysql": {
      "id": "import:mysql",
      "description": "Import a schema for a MySQL data source into your GraphQL API.\n\nstepzen import mysql automatically introspects a MySQL database, generates a GraphQL schema for accessing this database through a StepZen API, and merges the generated types, queries and mutations into your into your GraphQL schema.",
      "strict": true,
      "pluginName": "stepzen",
      "pluginAlias": "stepzen",
      "pluginType": "core",
      "aliases": [
        "import:singlestore"
      ],
      "flags": {
        "help": {
          "name": "help",
          "type": "boolean",
          "char": "h",
          "description": "Show CLI help",
          "allowNo": false
        },
        "non-interactive": {
          "name": "non-interactive",
          "type": "boolean",
          "description": "Disable all interactive prompts",
          "allowNo": false
        },
        "dir": {
          "name": "dir",
          "type": "option",
          "description": "Working directory",
          "multiple": false
        },
        "silent": {
          "name": "silent",
          "type": "boolean",
          "description": "This is an internal flag passed by the (no-arg) Import command when it launches a data-source specific import command. The intent is to avoid showing a welcome message twice (if its already been shown by the (no-arg) Import command).",
          "hidden": true,
          "allowNo": false
        },
        "name": {
          "name": "name",
          "type": "option",
          "description": "Subfolder inside the workspace folder to save the imported schema files to. Defaults to the name of the imported schema.",
          "multiple": false
        },
        "overwrite": {
          "name": "overwrite",
          "type": "boolean",
          "description": "Overwrite any existing schema with the same name. Cannot be used without also providing a --name flag.",
          "hidden": true,
          "allowNo": false,
          "dependsOn": [
            "name"
          ]
        },
        "db-host": {
          "name": "db-host",
          "type": "option",
          "description": "Database host and optional port (as HOST[:PORT])",
          "multiple": false
        },
        "db-user": {
          "name": "db-user",
          "type": "option",
          "description": "Database user name",
          "multiple": false
        },
        "db-password": {
          "name": "db-password",
          "type": "option",
          "description": "Database password",
          "multiple": false
        },
        "db-database": {
          "name": "db-database",
          "type": "option",
          "description": "Name of database to import",
          "multiple": false
        },
        "db-link-types": {
          "name": "db-link-types",
          "type": "boolean",
          "description": "Automatically link types based on foreign key relationships using @materializer (https://stepzen.com/docs/features/linking-types)",
          "allowNo": false
        },
        "db-include": {
          "name": "db-include",
          "type": "option",
          "description": "Should the generated GraphQL schema be based only on database views, only on tables or on both",
          "multiple": false,
          "options": [
            "tables-only",
            "views-only",
            "tables-and-views"
          ]
        },
        "db-use-deprecated-2022-naming": {
          "name": "db-use-deprecated-2022-naming",
          "type": "boolean",
          "description": "Use the deprecated pre-2023 naming convention in the generated GraphQL schema:\n\t- the generated type and property names are auto-capitalized into PascalCase\n\t- the generated field names use the getCustomer and getCustomerList style.\n\nOn the other hand, when using the default naming convention:\n\t- the generated type and property names match exactly the DB table and column names\n\t- the generated field names use the customer and customerList style.",
          "allowNo": false
        }
      },
      "args": {
        "dsn": {
          "name": "dsn",
          "description": "(optional) Data Source Name (DSN) of a MySQL database.\nExample: mysql://user:password@host:port/database\n\nFlags, such as --db-host, override the corresponding parts of the DSN (if both are provided)."
        }
      }
    },
    "import:openapi": {
      "id": "import:openapi",
      "description": "Import a REST API from an OpenAPI spec as a subgraph into your GraphQL API.\n\nstepzen import openapi automatically introspects an OpenAPI spec file, generates a GraphQL schema for accessing the REST API it describes through a StepZen API, and adds the generated types, queries, mutations and subscriptions for accessing this REST API through a StepZen API into your GraphQL schema.",
      "strict": true,
      "pluginName": "stepzen",
      "pluginAlias": "stepzen",
      "pluginType": "core",
      "hidden": true,
      "aliases": [],
      "flags": {
        "help": {
          "name": "help",
          "type": "boolean",
          "char": "h",
          "description": "Show CLI help",
          "allowNo": false
        },
        "non-interactive": {
          "name": "non-interactive",
          "type": "boolean",
          "description": "Disable all interactive prompts",
          "allowNo": false
        },
        "dir": {
          "name": "dir",
          "type": "option",
          "description": "Working directory",
          "multiple": false
        },
        "silent": {
          "name": "silent",
          "type": "boolean",
          "description": "This is an internal flag passed by the (no-arg) Import command when it launches a data-source specific import command. The intent is to avoid showing a welcome message twice (if its already been shown by the (no-arg) Import command).",
          "hidden": true,
          "allowNo": false
        },
        "name": {
          "name": "name",
          "type": "option",
          "description": "Subfolder inside the workspace folder to save the imported schema files to. Defaults to the name of the imported schema.",
          "multiple": false
        },
        "overwrite": {
          "name": "overwrite",
          "type": "boolean",
          "description": "Overwrite any existing schema with the same name. Cannot be used without also providing a --name flag.",
          "hidden": true,
          "allowNo": false,
          "dependsOn": [
            "name"
          ]
        }
      },
      "args": {
        "openapi": {
          "name": "openapi"
        }
      }
    },
    "import:postgresql": {
      "id": "import:postgresql",
      "description": "Import a schema for a PostgreSQL data source into your GraphQL API.\n\nstepzen import postgresql automatically introspects a PostgreSQL database, generates a GraphQL schema for accessing this database through a StepZen API, and merges the generated types, queries and mutations into your GraphQL schema.",
      "strict": true,
      "pluginName": "stepzen",
      "pluginAlias": "stepzen",
      "pluginType": "core",
      "aliases": [
        "import:postgres"
      ],
      "flags": {
        "help": {
          "name": "help",
          "type": "boolean",
          "char": "h",
          "description": "Show CLI help",
          "allowNo": false
        },
        "non-interactive": {
          "name": "non-interactive",
          "type": "boolean",
          "description": "Disable all interactive prompts",
          "allowNo": false
        },
        "dir": {
          "name": "dir",
          "type": "option",
          "description": "Working directory",
          "multiple": false
        },
        "silent": {
          "name": "silent",
          "type": "boolean",
          "description": "This is an internal flag passed by the (no-arg) Import command when it launches a data-source specific import command. The intent is to avoid showing a welcome message twice (if its already been shown by the (no-arg) Import command).",
          "hidden": true,
          "allowNo": false
        },
        "name": {
          "name": "name",
          "type": "option",
          "description": "Subfolder inside the workspace folder to save the imported schema files to. Defaults to the name of the imported schema.",
          "multiple": false
        },
        "overwrite": {
          "name": "overwrite",
          "type": "boolean",
          "description": "Overwrite any existing schema with the same name. Cannot be used without also providing a --name flag.",
          "hidden": true,
          "allowNo": false,
          "dependsOn": [
            "name"
          ]
        },
        "db-host": {
          "name": "db-host",
          "type": "option",
          "description": "Database host and optional port (as HOST[:PORT])",
          "multiple": false
        },
        "db-user": {
          "name": "db-user",
          "type": "option",
          "description": "Database user name",
          "multiple": false
        },
        "db-password": {
          "name": "db-password",
          "type": "option",
          "description": "Database password",
          "multiple": false
        },
        "db-database": {
          "name": "db-database",
          "type": "option",
          "description": "Name of database to import",
          "multiple": false
        },
        "db-schema": {
          "name": "db-schema",
          "type": "option",
          "description": "Database schema to import tables from (default: public)",
          "multiple": false
        },
        "db-link-types": {
          "name": "db-link-types",
          "type": "boolean",
          "description": "Automatically link types based on foreign key relationships using @materializer (https://stepzen.com/docs/features/linking-types)",
          "allowNo": false
        },
        "db-include": {
          "name": "db-include",
          "type": "option",
          "description": "Should the generated GraphQL schema be based only on database views, only on tables or on both",
          "multiple": false,
          "options": [
            "tables-only",
            "views-only",
            "tables-and-views"
          ]
        },
        "db-use-deprecated-2022-naming": {
          "name": "db-use-deprecated-2022-naming",
          "type": "boolean",
          "description": "Use the deprecated pre-2023 naming convention in the generated GraphQL schema:\n\t- the generated type and property names are auto-capitalized into PascalCase\n\t- the generated field names use the getCustomer and getCustomerList style.\n\nOn the other hand, when using the default naming convention:\n\t- the generated type and property names match exactly the DB table and column names\n\t- the generated field names use the customer and customerList style.",
          "allowNo": false
        }
      },
      "args": {
        "dsn": {
          "name": "dsn",
          "description": "(optional) Data Source Name (DSN) of a PostgreSQL database.\nExample: postgresql://user:password@host:port/database?schema=schema\n\nFlags, such as --db-host, override the corresponding parts of the DSN (if both are provided)."
        }
      }
    },
    "import:presto": {
      "id": "import:presto",
      "description": "Import a schema for a Presto data source into your GraphQL API.\n\nstepzen import presto automatically introspects a Presto database, generates a GraphQL schema for accessing this database through a StepZen API, and merges the generated types, queries and mutations into your into your GraphQL schema.",
      "strict": true,
      "pluginName": "stepzen",
      "pluginAlias": "stepzen",
      "pluginType": "core",
      "hidden": true,
      "aliases": [],
      "flags": {
        "help": {
          "name": "help",
          "type": "boolean",
          "char": "h",
          "description": "Show CLI help",
          "allowNo": false
        },
        "non-interactive": {
          "name": "non-interactive",
          "type": "boolean",
          "description": "Disable all interactive prompts",
          "allowNo": false
        },
        "dir": {
          "name": "dir",
          "type": "option",
          "description": "Working directory",
          "multiple": false
        },
        "silent": {
          "name": "silent",
          "type": "boolean",
          "description": "This is an internal flag passed by the (no-arg) Import command when it launches a data-source specific import command. The intent is to avoid showing a welcome message twice (if its already been shown by the (no-arg) Import command).",
          "hidden": true,
          "allowNo": false
        },
        "name": {
          "name": "name",
          "type": "option",
          "description": "Subfolder inside the workspace folder to save the imported schema files to. Defaults to the name of the imported schema.",
          "multiple": false
        },
        "overwrite": {
          "name": "overwrite",
          "type": "boolean",
          "description": "Overwrite any existing schema with the same name. Cannot be used without also providing a --name flag.",
          "hidden": true,
          "allowNo": false,
          "dependsOn": [
            "name"
          ]
        },
        "db-host": {
          "name": "db-host",
          "type": "option",
          "description": "Database host and optional port (as HOST[:PORT])",
          "multiple": false
        },
        "db-user": {
          "name": "db-user",
          "type": "option",
          "description": "Database user name",
          "multiple": false
        },
        "db-password": {
          "name": "db-password",
          "type": "option",
          "description": "Database password",
          "multiple": false
        },
        "db-catalog": {
          "name": "db-catalog",
          "type": "option",
          "description": "Name of the catalog to import",
          "multiple": false
        },
        "db-schema": {
          "name": "db-schema",
          "type": "option",
          "description": "Database schema to import tables from (default: public)",
          "multiple": false
        },
        "db-link-types": {
          "name": "db-link-types",
          "type": "boolean",
          "description": "Automatically link types based on foreign key relationships using @materializer (https://stepzen.com/docs/features/linking-types)",
          "allowNo": false
        },
        "db-include": {
          "name": "db-include",
          "type": "option",
          "description": "Should the generated GraphQL schema be based only on database views, only on tables or on both",
          "multiple": false,
          "options": [
            "tables-only",
            "views-only",
            "tables-and-views"
          ]
        }
      },
      "args": {
        "dsn": {
          "name": "dsn",
          "description": "(optional) Data Source Name (DSN) of a Presto data source.\nExample: presto://user:password@host:port/catalog\n\nFlags, such as --db-host, override the corresponding parts of the DSN (if both are provided)."
        }
      }
    },
    "import:snowflake": {
      "id": "import:snowflake",
      "description": "Import a schema for a Snowflake data source into your GraphQL API.\n\nstepzen import snowflake automatically introspects a Snowflake database, generates a GraphQL schema for accessing this database through a StepZen API, and merges the generated types, queries and mutations into your GraphQL schema.",
      "strict": true,
      "pluginName": "stepzen",
      "pluginAlias": "stepzen",
      "pluginType": "core",
      "aliases": [],
      "flags": {
        "help": {
          "name": "help",
          "type": "boolean",
          "char": "h",
          "description": "Show CLI help",
          "allowNo": false
        },
        "non-interactive": {
          "name": "non-interactive",
          "type": "boolean",
          "description": "Disable all interactive prompts",
          "allowNo": false
        },
        "dir": {
          "name": "dir",
          "type": "option",
          "description": "Working directory",
          "multiple": false
        },
        "silent": {
          "name": "silent",
          "type": "boolean",
          "description": "This is an internal flag passed by the (no-arg) Import command when it launches a data-source specific import command. The intent is to avoid showing a welcome message twice (if its already been shown by the (no-arg) Import command).",
          "hidden": true,
          "allowNo": false
        },
        "name": {
          "name": "name",
          "type": "option",
          "description": "Subfolder inside the workspace folder to save the imported schema files to. Defaults to the name of the imported schema.",
          "multiple": false
        },
        "overwrite": {
          "name": "overwrite",
          "type": "boolean",
          "description": "Overwrite any existing schema with the same name. Cannot be used without also providing a --name flag.",
          "hidden": true,
          "allowNo": false,
          "dependsOn": [
            "name"
          ]
        },
        "db-user": {
          "name": "db-user",
          "type": "option",
          "description": "Database user name",
          "multiple": false
        },
        "db-password": {
          "name": "db-password",
          "type": "option",
          "description": "Database password",
          "multiple": false
        },
        "db-database": {
          "name": "db-database",
          "type": "option",
          "description": "Name of database to import",
          "multiple": false
        },
        "db-schema": {
          "name": "db-schema",
          "type": "option",
          "description": "Database schema to import tables from (default: PUBLIC)",
          "multiple": false
        },
        "db-link-types": {
          "name": "db-link-types",
          "type": "boolean",
          "description": "Automatically link types based on foreign key relationships using @materializer (https://stepzen.com/docs/features/linking-types)",
          "allowNo": false
        },
        "db-include": {
          "name": "db-include",
          "type": "option",
          "description": "Should the generated GraphQL schema be based only on database views, only on tables or on both",
          "multiple": false,
          "options": [
            "tables-only",
            "views-only",
            "tables-and-views"
          ]
        },
        "db-use-deprecated-2022-naming": {
          "name": "db-use-deprecated-2022-naming",
          "type": "boolean",
          "description": "Use the deprecated pre-2023 naming convention in the generated GraphQL schema:\n\t- the generated type and property names are auto-capitalized into PascalCase\n\t- the generated field names use the getCustomer and getCustomerList style.\n\nOn the other hand, when using the default naming convention:\n\t- the generated type and property names match exactly the DB table and column names\n\t- the generated field names use the customer and customerList style.",
          "allowNo": false
        },
        "snowflake-account-id": {
          "name": "snowflake-account-id",
          "type": "option",
          "description": "Snowflake account identifier in the orgname-accountname format. For more information, see the Snowflake documentation at https://docs.snowflake.com/en/user-guide/admin-account-identifier.html.",
          "multiple": false
        },
        "snowflake-warehouse": {
          "name": "snowflake-warehouse",
          "type": "option",
          "description": "Snowflake warehouse",
          "multiple": false
        }
      },
      "args": {
        "dsn": {
          "name": "dsn",
          "description": "(optional) Data Source Name (DSN) of a Snowflake database.\nExample: snowflake://user:password@orgname-accountname/database?warehouse=warehouse&schema=schema\n\nFlags, such as --db-host, override the corresponding parts of the DSN (if both are provided)."
        }
      }
    }
  }
}