import { type StepZenEndpointV2, type ZenCtlResponseV2 } from '@stepzen/sdk';
import { type SdkInterfaceV2 } from '../shared/stepzen-sdk';
import { type LoggedInMachineConfiguration, type Workspace } from '../shared/types';
import ZenCommand from '../shared/zen-command';
export default class Deploy extends ZenCommand {
    static description: string;
    static usage: string;
    static flags: {
        dir: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        silent: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        configurationsets: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        config: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        schema: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        help: import("@oclif/core/lib/interfaces").BooleanFlag<void>;
        'non-interactive': import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
    };
    static args: {
        endpoint: import("@oclif/core/lib/interfaces/parser").Arg<string | undefined, Record<string, unknown>>;
    };
    run(): Promise<void>;
    doDeployV1WithSdkV1({ endpoint, schema, configurationsets, configuration, }: {
        endpoint: string;
        schema: string;
        configurationsets?: string;
        configuration: LoggedInMachineConfiguration;
    }): Promise<{
        endpoint: string;
        response: {
            data: string | undefined;
            error: {
                message: string;
            } | undefined;
        };
    }>;
    doDeployV2WithSdkV1({ endpoint, workspace, endpointConfig, configuration, }: {
        endpoint: string;
        workspace: Workspace;
        endpointConfig?: string;
        configuration: LoggedInMachineConfiguration;
    }): Promise<{
        endpoint: string;
        response: {
            data: string | undefined;
            error: {
                message: string;
            } | undefined;
        };
    }>;
    doDeployV2WithSdkV2({ endpoint, workspace, endpointConfig, configuration, stepzen, }: {
        endpoint: string;
        workspace: Workspace;
        endpointConfig?: string;
        configuration: LoggedInMachineConfiguration;
        stepzen: SdkInterfaceV2;
    }): Promise<{
        endpoint: string;
        response: ZenCtlResponseV2<StepZenEndpointV2>;
    }>;
}
//# sourceMappingURL=deploy.d.ts.map