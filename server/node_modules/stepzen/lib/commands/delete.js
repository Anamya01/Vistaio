"use strict";
// Copyright IBM Corp. 2020, 2024
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const core_1 = require("@oclif/core");
const errors_1 = require("@oclif/core/lib/errors");
const inquirer = require("inquirer");
const prettyMilliseconds = require("pretty-ms");
const constants_1 = require("../shared/constants");
const stepzen_sdk_1 = require("../shared/stepzen-sdk");
const utils_1 = require("../shared/utils");
const zen_command_1 = require("../shared/zen-command");
class Delete extends zen_command_1.default {
    async run() {
        const { args, flags } = await this.parse(Delete);
        // validate the endpoint arg
        if (args.endpoint) {
            const maybeError = (0, utils_1.validateEndpoint)(args.endpoint);
            if (typeof maybeError === 'string') {
                throw new errors_1.CLIError(maybeError);
            }
        }
        const { configuration } = await this.ensureStepZenAccount({
            nonInteractive: flags['non-interactive'],
        });
        const domain = (0, constants_1.getZenServDomain)(configuration);
        const { result: client } = await (0, stepzen_sdk_1.tryZenCtl2ThenZenCtl1)(configuration, stepzen => {
            if (stepzen.version === 'v2') {
                return stepzen.client({
                    account: configuration.account,
                    adminKey: configuration.adminkey,
                    deploymentType: (0, constants_1.getDeploymentType)(configuration),
                });
            }
            throw new errors_1.CLIError(chalk `{bold stepzen delete} is not supported for {bold *.${domain}}` +
                ` endpoints yet.` +
                `\nPlease contact support via the StepZen Discord channel` +
                ` (${constants_1.STEPZEN_DISCORD_URL}).`);
        });
        const zenserv = (0, constants_1.getZenServUrl)(configuration);
        const endpoint = args.endpoint;
        const url = `${zenserv}/${endpoint}/__graphql`;
        const subsurl = `${zenserv.replace(/^http/i, 'ws')}/stepzen-subscriptions/${endpoint}/__graphql`;
        const lines = [];
        lines.push(chalk.bold(chalk `This operation will delete the {yellow ${endpoint}}` +
            ` GraphQL endpoint from the StepZen servers.`));
        lines.push('All requests to this endpoint will start getting error responses:');
        lines.push(chalk `  {yellow тип ${url}}`);
        lines.push(chalk `  {yellow тип ${subsurl}}`);
        lines.push('');
        this.log(lines.join('\n'));
        if (flags['non-interactive']) {
            await this.executeDelete({
                client,
                endpoint,
            });
        }
        else {
            const responses = await inquirer.prompt([
                {
                    name: 'confirm',
                    message: `Do you wish to continue?`,
                    type: 'list',
                    choices: [
                        { name: 'No, cancel', value: 'cancelled' },
                        { name: chalk `Yes, delete {yellow ${endpoint}}`, value: 'confirmed' },
                    ],
                },
            ]);
            if (responses.confirm === 'confirmed') {
                this.log('');
                await this.executeDelete({
                    client,
                    endpoint,
                });
            }
        }
    }
    async executeDelete({ client, endpoint, }) {
        const idx = endpoint.indexOf('/');
        const folder = endpoint.slice(0, idx);
        const name = endpoint.slice(idx + 1);
        const actionStart = Date.now();
        let result;
        core_1.ux.action.start(`Deleting ${chalk.yellow(endpoint)} from StepZen`);
        try {
            const response = await client.delete({
                folder,
                name,
            });
            result = response.data;
        }
        catch (error) {
            core_1.ux.action.stop(chalk.red('fail'));
            throw error;
        }
        if (!result || result.length === 0) {
            core_1.ux.action.stop(chalk.red('fail'));
            throw new errors_1.CLIError(chalk `Unable to delete {yellow ${endpoint}}.` +
                chalk ` Ensure it is a deployed endpoint by running` +
                chalk ` {bold stepzen list}`);
        }
        const actionEnd = Date.now();
        const actionTime = actionEnd - actionStart;
        core_1.ux.action.stop(`${chalk.grey('done in')} ${prettyMilliseconds(actionTime)} ЁЯЪА`);
        this.log('It may take up to a minute for the change to take effect.');
    }
}
exports.default = Delete;
Delete.description = 'Delete an endpoint from your StepZen account.';
Delete.args = {
    endpoint: core_1.Args.string({
        description: chalk `name of the endpoint (e.g. {bold api/customers})`,
        required: true,
    }),
};
//# sourceMappingURL=delete.js.map