"use strict";Object.defineProperty(exports, "__esModule", {value: true});var h=Object.defineProperty,I=Object.defineProperties;var S=Object.getOwnPropertyDescriptors;var P=Object.getOwnPropertySymbols;var g=Object.prototype.hasOwnProperty,R=Object.prototype.propertyIsEnumerable;var D=(r,s,e)=>s in r?h(r,s,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[s]=e,u=(r,s)=>{for(var e in s||(s={}))g.call(s,e)&&D(r,e,s[e]);if(P)for(var e of P(s))R.call(s,e)&&D(r,e,s[e]);return r},b=(r,s)=>I(r,S(s));var y=(r,s)=>{var e={};for(var n in r)g.call(r,n)&&s.indexOf(n)<0&&(e[n]=r[n]);if(r!=null&&P)for(var n of P(r))s.indexOf(n)<0&&R.call(r,n)&&(e[n]=r[n]);return e};var w={EMPTY_DSN:"DSN cannot be empty",INVALID_ARGUMENT:"DSN must be a string",PARSE_ERROR:"Cannot parse DSN",INVALID_PORT:"Invalid port"};var f=(r,s)=>({success:!1,reason:r,message:s||w[r]}),x=(r,s=!0)=>typeof r=="string"&&(s?r.trim():r).length>0,E=r=>typeof r=="string"&&/^-?\d{1,16}$/.test(r),O=r=>r<65536&&r>0,N=r=>Object.keys(r).reduce((s,e)=>(r[e]!==void 0&&(s[e]=r[e]),s),{}),k=(r,s)=>{let e={},p=r,{params:n}=p,a=y(p,["params"]);return Object.entries(a).forEach(([o,t])=>{e[o]=o in s?s[o]:t}),e.params=n,e};var T={setTrueForUndefinedValues:!0,parseBooleans:!0,parseNumbers:!0},v=(r,s)=>{let{parseBooleans:e,setTrueForUndefinedValues:n,parseNumbers:a}=u(u({},T),s||{}),p=n?!0:null;return r.split("&").filter(t=>t.trim().length>0).reduce((t,m)=>{let[i,d=null]=m.split("="),l;return typeof d=="string"?a&&E(d)?l=Number.parseInt(d,10):l=e&&["true","false"].includes(d)?d==="true":decodeURIComponent(d):l=p,b(u({},t),{[i]:l})},{})};var V=new RegExp("^(?<driver>([\\w-]+)):\\/\\/((?<user>[^/:]{1,200})?(:(?<pass>.{0,250}))?@)?(?<host>[^/:]{1,400}?)(:(?<port>\\d+)?)?(\\/(?<db>([.#@$\\w-])+))?(\\?(?<params>.+))?$"),$={lowercaseDriver:!1,overrides:{}},c= exports.parseDsn =(r,s)=>{if(!x(r))return f(typeof r!="string"?"INVALID_ARGUMENT":"EMPTY_DSN");let e=u(u({},$),s||{}),{overrides:n={},lowercaseDriver:a}=e,p=r.match(V);if(p===null||!p.groups)return f("PARSE_ERROR");let o={};Object.entries(p.groups).forEach(([m,i])=>{if(typeof i=="string")switch(m){case"driver":o.driver=a?i.toLowerCase():i;break;case"port":o.port=Number.parseInt(i,10);break;case"params":o.params=v(i);break;default:o[m]=i}});let t=N(k(o,n));return t!=null&&t.port&&!O(t.port)?f("INVALID_PORT",`Invalid port: ${t.port}`):{success:!0,value:t}};var A=(r,s)=>{var a;let e=c(r,s);if(e.success)return e.value;let n=(a=s==null?void 0:s.errorMsgPrefix)!=null?a:"Can't parse dsn";throw new Error(`${n}: ${e.message} (${e.reason})`)};var U=(r,s)=>{let e=c(r);if(!e.success)throw new Error(s||`${e.message} (${e.reason})`)};var _=r=>c(r).success;exports.assertParsableDsn = U; exports.isParsableDsn = _; exports.parseDsn = c; exports.parseDsnOrThrow = A;
//# sourceMappingURL=index.js.map