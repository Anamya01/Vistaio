"use strict";
// Copyright IBM Corp. 2020, 2024
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const errors_1 = require("@oclif/core/lib/errors");
const chalk = require("chalk");
const lodash_1 = require("lodash");
const flags_1 = require("../../generate/flags");
const import_command_1 = require("../../generate/import-command");
const questions_1 = require("../../generate/questions");
const sql2sdl_1 = require("../../generate/sql2sdl");
const configuration_1 = require("../../shared/configuration");
const dsn_parser_1 = require("@soluble/dsn-parser");
const inquirer = require("../../shared/inquirer");
const utils_1 = require("../../shared/utils");
class ImportPostgreSQL extends import_command_1.ImportCommandBase {
    get source() {
        return 'postgresql';
    }
    async import(commonOptions) {
        const { args, flags } = await this.parse(ImportPostgreSQL);
        const nonInteractiveOptions = {
            ...(args.dsn ? this.getImportOptionsFromDsn(args.dsn) : {}),
            ...this.getImportOptionsFromFlags(flags),
        };
        const requiredOptions = [
            'host',
            'user',
            'password',
            'database',
        ];
        const hasRequiredOptions = requiredOptions.every(option => nonInteractiveOptions[option] !== undefined);
        let sql2sdlOptions;
        if (hasRequiredOptions) {
            // an ugly hint for the TS compiler because it is not smart enough to figure this :(
            const typedNonInteractiveOptions = nonInteractiveOptions;
            // run non-interactively
            sql2sdlOptions = {
                dbType: this.source,
                ...commonOptions,
                ...typedNonInteractiveOptions,
            };
        }
        else {
            if (flags['non-interactive']) {
                throw new errors_1.CLIError('Please provide a Data Source Name (DSN) string for a PostgreSQL database.' +
                    chalk `\nSee more help with {bold stepzen import postgresql --help}`);
            }
            // no parameters given: start an interactive prompt
            if (!flags.silent) {
                this.log();
                this.log(chalk `{bold stepzen import postgresql} - ` +
                    chalk.dim('introspect a PostgreSQL database and extend your GraphQL schema' +
                        ' with the types, queries and mutations for accessing it through' +
                        ' a StepZen API.'));
                this.log();
            }
            // one or more required parameters are missing: start an interactive prompt
            const interactiveOptions = await this.getImportOptionsInteractively(nonInteractiveOptions);
            sql2sdlOptions = {
                dbType: this.source,
                ...commonOptions,
                // Some options that may have been provided via the command line are
                // excluded from the interactive prompts (e.g. `--db-include`). That's
                // why the non-interactive options are also included here.
                ...nonInteractiveOptions,
                ...interactiveOptions,
            };
        }
        const configuration = await (0, configuration_1.readConfiguration)();
        sql2sdlOptions.host = (0, utils_1.rewriteLocalhostToHostGateway)(configuration, sql2sdlOptions.host);
        return this.wrapInProgressAndTimeout((0, sql2sdl_1.sql2sdl)(sql2sdlOptions, configuration));
    }
    getImportOptionsFromFlags(flags) {
        const options = {
            host: flags['db-host'],
            user: flags['db-user'],
            password: flags['db-password'],
            database: flags['db-database'],
            schema: flags['db-schema'],
            linkTypes: flags['db-link-types'],
            include: flags['db-include'],
            introspectionOptions: {
                // Use the 2023 naming convention by default, and the 2022 naming
                // convention only if explicitly requested by the user.
                naming: flags['db-use-deprecated-2022-naming'] ? '2022' : '2023',
            },
        };
        // Remove `undefined`-valued properties
        return (0, lodash_1.pickBy)(options, value => value !== undefined);
    }
    getImportOptionsFromDsn(possibleDsn) {
        const parsed = (0, dsn_parser_1.parseDsn)(possibleDsn);
        if (parsed.success) {
            const value = parsed.value;
            const options = {
                host: value.host + (value.port ? `:${value.port}` : ''),
                user: value.user ?? value.params?.user,
                password: value.pass ?? value.params?.password,
                database: value.db,
                schema: value.params?.schema === undefined
                    ? undefined
                    : `${value.params?.schema}`,
            };
            // Remove `undefined`-valued properties
            return (0, lodash_1.pickBy)(options, value => value !== undefined);
        }
        throw new errors_1.CLIError(parsed.message);
    }
    async getImportOptionsInteractively(defaults = {}) {
        const questions = inquirer.overrideDefaults([
            questions_1.ImportQuestions.dbHost(),
            questions_1.ImportQuestions.dbUser(),
            questions_1.ImportQuestions.dbPassword(),
            questions_1.ImportQuestions.dbDatabase(),
            questions_1.ImportQuestions.dbSchema(),
            questions_1.ImportQuestions.dbLinkTypes(),
        ], defaults);
        return inquirer.prompt(`import-${this.source}`, questions);
    }
}
exports.default = ImportPostgreSQL;
ImportPostgreSQL.description = `Import a schema for a PostgreSQL data source into your GraphQL API.` +
    `\n` +
    chalk `\n{bold stepzen import postgresql} automatically introspects a` +
    ` PostgreSQL database, generates a GraphQL schema for accessing this` +
    ` database through a StepZen API, and merges the generated types,` +
    ` queries and mutations into your GraphQL schema.`;
ImportPostgreSQL.aliases = ['import:postgres'];
ImportPostgreSQL.flags = {
    ...import_command_1.ImportCommandBase.flags,
    'db-host': flags_1.ImportFlags.dbHost(),
    'db-user': flags_1.ImportFlags.dbUser(),
    'db-password': flags_1.ImportFlags.dbPassword(),
    'db-database': flags_1.ImportFlags.dbDatabase(),
    'db-schema': flags_1.ImportFlags.dbSchema(),
    'db-link-types': flags_1.ImportFlags.dbLinkTypes(),
    'db-include': flags_1.ImportFlags.dbInclude(),
    'db-use-deprecated-2022-naming': flags_1.ImportFlags.dbUseDeprecatedNaming(),
};
ImportPostgreSQL.args = {
    dsn: core_1.Args.string({
        description: chalk `{italic (optional)} Data Source Name (DSN) of a PostgreSQL database.` +
            chalk `\nExample: {bold postgresql://user:password@host:port/database?schema=schema}` +
            chalk `\n` +
            chalk `\nFlags, such as {bold --db-host}, override the corresponding` +
            chalk ` parts of the DSN (if both are provided).`,
    }),
};
//# sourceMappingURL=postgresql.js.map