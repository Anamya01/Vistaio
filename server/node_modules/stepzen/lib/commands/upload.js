"use strict";
// Copyright IBM Corp. 2020, 2024
Object.defineProperty(exports, "__esModule", { value: true });
// This file contains the code for the `stepzen upload` command.
// The upload command transfers resources on your local file system
// to Stepzen. You have to upload your resources before you can
// deploy them. This is because stepzen will automatically keep your
// endpoints live in the events of hardware and other failures.
// Resources that can be uploaded can be schemas or configurationsets.
// When uploaded, each resource is stored and referenced using a name
// provided by the user.
const chalk = require("chalk");
const core_1 = require("@oclif/core");
const errors_1 = require("@oclif/core/lib/errors");
const actions_1 = require("../shared/actions");
const zen_command_1 = require("../shared/zen-command");
const stepzen_sdk_1 = require("../shared/stepzen-sdk");
class Upload extends zen_command_1.default {
    async run() {
        const { args, flags } = await this.parse(Upload);
        const type = args.type;
        if (!flags.silent) {
            this.warn(chalk `{yellow {bold stepzen upload} is deprecated in favor of}` +
                chalk ` {yellow {bold stepzen deploy}, and will be removed in future versions}` +
                chalk `\n\tSee more help with --help`);
        }
        // Make sure that you definitely specify folder/name
        if (args.destination.includes('/') === false) {
            throw new errors_1.CLIError('You must specify the folder/name you want to use');
        }
        const { configuration } = await this.ensureStepZenAccount({
            nonInteractive: flags['non-interactive'],
        });
        let source;
        if (type === 'configurationset') {
            if (!flags.file) {
                throw new errors_1.CLIError('Please specify a source file with the --file flag');
            }
            source = flags.file;
        }
        else {
            if (!flags.dir) {
                throw new errors_1.CLIError('Please specify a source directory with the --dir flag');
            }
            source = flags.dir;
        }
        if (!flags.silent) {
            this.log('Uploading...');
        }
        const { result } = await (0, stepzen_sdk_1.tryZenCtl2ThenZenCtl1)(configuration, stepzen => {
            if (stepzen.version === 'v2') {
                throw new errors_1.CLIError(chalk `{bold stepzen upload} is no longer supported.` +
                    chalk ` Please use {bold stepzen deploy} instead.`);
            }
            return (0, actions_1.upload)(type, args.destination, source);
        });
        if (result.success) {
            if (!flags.silent) {
                this.log(result.message);
            }
        }
        else {
            // Errors. Exit, and output the server's error result
            throw new errors_1.CLIError(JSON.stringify(result.errors) || 'An error occurred.');
        }
    }
}
exports.default = Upload;
Upload.description = chalk `{yellow [DEPRECATED]} Upload a schema or a configuration set to StepZen.` +
    chalk `\n{yellow {bold stepzen upload} is deprecated in favor of {bold stepzen deploy}}` +
    chalk `\nStepZen CLI is moving away from a two-step "upload" + "deploy"` +
    chalk ` flow to a single-step "deploy" flow.`;
// The uploaded resource is either a directory or a file. In case it is the former,
// it will be packaged into a zip archive and transferred.
Upload.flags = {
    ...zen_command_1.default.flags,
    dir: core_1.Flags.string({
        description: 'A directory to upload',
        exclusive: ['file'],
    }),
    file: core_1.Flags.string({ description: 'A file to upload', exclusive: ['dir'] }),
    silent: core_1.Flags.boolean(),
};
// the type and name of the uploaded resource.
Upload.args = {
    type: core_1.Args.string({
        required: true,
        description: 'type',
        options: ['configurationset', 'schema'],
    }),
    destination: core_1.Args.string({
        description: 'destination',
        required: true,
    }),
};
//# sourceMappingURL=upload.js.map