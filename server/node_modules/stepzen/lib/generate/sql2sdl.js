"use strict";
// Copyright IBM Corp. 2020, 2024
Object.defineProperty(exports, "__esModule", { value: true });
exports.sql2sdl = void 0;
const constants_1 = require("../shared/constants");
const utils_1 = require("../shared/utils");
const url_helpers_1 = require("../shared/url-helpers");
const helpers_1 = require("./helpers");
const sql2sdl = async (options, configuration) => {
    let driver;
    switch (options.dbType) {
        case 'mysql':
            driver = 'MYSQL';
            break;
        case 'postgresql':
            driver = 'POSTGRESQL';
            break;
        case 'snowflake':
            driver = 'SNOWFLAKE';
            break;
        case 'presto':
            driver = 'PRESTO';
            break;
    }
    let inludeAsTableOptions;
    switch (options.include) {
        case 'tables-only':
            inludeAsTableOptions = 'ONLYTABLES';
            break;
        case 'views-only':
            inludeAsTableOptions = 'ONLYVIEWS';
            break;
        case 'tables-and-views':
            inludeAsTableOptions = 'TABLESANDVIEWS';
            break;
        default:
            inludeAsTableOptions = null;
    }
    // Only use the 2022 naming if explicitly asked for. Use the 2023 naming by
    // default (the introspection service needs to be explicitly asked for 2023
    // naming because it keeps backwards compat with earlier CLI versions).
    const naming = options.introspectionOptions?.naming === '2022' ? 'USE_2022' : 'USE_2023';
    let driverProperties;
    if (options.dbType === 'snowflake') {
        const { result, error } = (0, utils_1.parseSnowflakeAccountId)(options.accountId);
        if (error) {
            return { error };
        }
        driverProperties = [
            { property: 'ORGANIZATION', value: result.organization },
            { property: 'ACCOUNT', value: result.account },
            { property: 'WAREHOUSE', value: options.warehouse },
        ];
    }
    const effectiveName = options.name || options.dbType;
    const hostDetails = options.dbType === 'snowflake'
        ? { host: '', port: undefined }
        : (0, url_helpers_1.parseHost)(options.host);
    return (0, helpers_1.queryIntrospectionService)((0, constants_1.getDBIntrospectionUrl)(configuration), {
        operation: 'generateSDL',
        variables: {
            driver: {
                type: 'DBDriver!',
                value: driver,
            },
            host: {
                type: 'String!',
                value: hostDetails.host,
            },
            port: {
                type: 'Int',
                value: hostDetails.port === undefined
                    ? null
                    : parseInt(hostDetails.port, 10),
            },
            ...((0, utils_1.getFeatureFlag)(constants_1.ENABLE_PRESTO_IMPORT)
                ? {
                    database: {
                        type: 'String',
                        value: options.dbType === 'presto' ? null : options.database,
                    },
                    catalog: {
                        type: 'String',
                        value: options.dbType === 'presto' ? options.catalog : null,
                    },
                }
                : {
                    database: {
                        type: 'String!',
                        value: options.database,
                    },
                }),
            user: {
                type: 'String!',
                value: options.user,
            },
            password: {
                type: 'String!',
                value: options.password,
            },
            onlyTypes: {
                type: 'Boolean',
                value: !options.linkTypes,
            },
            include: {
                type: 'TableOptions',
                value: inludeAsTableOptions,
            },
            introspectionOptions: {
                type: 'DBIntrospectionOptionsInput',
                value: {
                    naming,
                },
            },
            driverProperties: {
                type: '[DriverPropertyInput!]',
                value: driverProperties,
            },
            schema: {
                type: 'String',
                // The introspection service treats the schema value '' (empty string)
                // as 'all schemas'. In order to get the introspection service to use
                // the default, it needs to get a `null` schema value.
                // However, when the user skips over the "schema" interactive question
                // (by pressing <Enter>) the value of schema would be ''.
                value: options.dbType === 'mysql' || options.schema === ''
                    ? null
                    : options.schema,
            },
            configName: {
                type: 'String!',
                value: `${effectiveName}_config`,
            },
        },
    });
};
exports.sql2sdl = sql2sdl;
//# sourceMappingURL=sql2sdl.js.map