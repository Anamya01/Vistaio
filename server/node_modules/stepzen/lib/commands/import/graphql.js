"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright IBM Corp. 2020, 2024
const core_1 = require("@oclif/core");
const chalk = require("chalk");
const graphql2sdl_1 = require("../../generate/graphql2sdl");
const helpers_1 = require("../../generate/helpers");
const import_command_1 = require("../../generate/import-command");
const questions_1 = require("../../generate/questions");
const configuration_1 = require("../../shared/configuration");
const inquirer = require("../../shared/inquirer");
const utils_1 = require("../../shared/utils");
const flags_1 = require("../../generate/flags");
const header_1 = require("../../shared/header");
const errors_1 = require("@oclif/core/lib/errors");
class ImportGraphQL extends import_command_1.ImportCommandBase {
    get source() {
        return 'graphql';
    }
    async import(commonOptions) {
        const { args, flags } = await this.parse(ImportGraphQL);
        const nonInteractiveOptions = {
            typePrefix: flags.prefix,
            endpoint: args.url,
            headers: (0, helpers_1.parseHeaderFlags)(flags.header, flags['header-param']),
        };
        let graphql2sdlOptions;
        if (nonInteractiveOptions.endpoint) {
            // an ugly hint for the TS compiler because it is not smart enough to figure this :(
            const typedNonInteractiveOptions = nonInteractiveOptions;
            // run non-interactively
            graphql2sdlOptions = {
                ...commonOptions,
                ...typedNonInteractiveOptions,
            };
        }
        else {
            if (flags['non-interactive']) {
                throw new errors_1.CLIError('Please provide a GraphQL endpoint URL.' +
                    chalk `\nSee more help with {bold stepzen import graphql --help}`);
            }
            // no parameters given: start an interactive prompt
            if (!flags.silent) {
                this.log();
                this.log(chalk `{bold stepzen import graphql} - ` +
                    chalk.dim('introspect a GraphQL API endpoint and extend your GraphQL schema' +
                        ' with the types, queries and mutations for accessing it through' +
                        ' a StepZen API.'));
                this.log();
            }
            // no parameters given: start an interactive prompt
            const interactiveOptions = await this.getImportOptionsInteractively(nonInteractiveOptions);
            graphql2sdlOptions = {
                ...commonOptions,
                ...interactiveOptions,
                // include boths headers passed via flags and headers entered interactively
                headers: [
                    ...nonInteractiveOptions.headers,
                    ...interactiveOptions.headers,
                ],
            };
        }
        const configuration = await (0, configuration_1.readConfiguration)();
        graphql2sdlOptions.endpoint = (0, utils_1.rewriteLocalhostToHostGatewayInURL)(configuration, graphql2sdlOptions.endpoint);
        return this.wrapInProgressAndTimeout((0, graphql2sdl_1.graphql2sdl)(graphql2sdlOptions, configuration));
    }
    async getImportOptionsInteractively(defaults = {}) {
        const questions = inquirer.overrideDefaults([
            {
                name: 'endpoint',
                message: 'What is the GraphQL endpoint URL?',
                validate: input => input.trim() !== '',
            },
            questions_1.ImportQuestions.prefix(),
            {
                name: 'includeRootOperations',
                type: 'confirm',
                message: 'Should type prefix be added to query and mutation fields as well?',
                when: answers => Boolean(answers.typePrefix),
            },
            {
                name: 'header',
                type: 'input',
                message: 'Add an HTTP header, e.g. Header-Name: header value (leave blank for none)',
                validate: input => input === '' || header_1.HEADER_REGEX.test(input.trim()) || 'invalid header',
            },
        ], defaults);
        const answers = await inquirer.prompt('import-graphql', questions);
        const { result: header } = (0, header_1.parseHeader)(answers.header);
        return {
            endpoint: answers.endpoint,
            typePrefix: answers.typePrefix.trim() === ''
                ? undefined
                : answers.typePrefix.trim(),
            includeRootOperations: answers.includeRootOperations,
            headers: header ? [header] : [],
        };
    }
}
exports.default = ImportGraphQL;
ImportGraphQL.description = `Import a GraphQL API as a subgraph into your GraphQL API.` +
    `\n` +
    chalk `\n{bold stepzen import graphql} automatically introspects a GraphQL` +
    ` endpoint and merges the types, queries, mutations and subscriptions` +
    ` for accessing this endpoint through a StepZen API into your GraphQL` +
    ` schema.`;
ImportGraphQL.flags = {
    ...import_command_1.ImportCommandBase.flags,
    prefix: flags_1.ImportFlags.prefix(),
    header: flags_1.ImportFlags.header(),
    'header-param': flags_1.ImportFlags.headerParam(),
};
ImportGraphQL.args = {
    url: core_1.Args.string({
        name: 'GraphQL endpoint URL',
    }),
};
//# sourceMappingURL=graphql.js.map