"use strict";
// Copyright IBM Corp. 2020, 2024
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const core_1 = require("@oclif/core");
const errors_1 = require("@oclif/core/lib/errors");
const fsx = require("fs-extra");
const path = require("path");
const transpiler_1 = require("@stepzen/transpiler");
const utils_1 = require("../shared/utils");
const zen_command_1 = require("../shared/zen-command");
const rmtemp_1 = require("../shared/rmtemp");
class Transpile extends zen_command_1.default {
    async run() {
        const { args, flags } = await this.parse(Transpile);
        const folder = (0, utils_1.getDirectory)(args.folder);
        // CONFIG
        if (flags['output-configuration']) {
            const config = await (0, transpiler_1.configure)(folder, flags.silent);
            if (flags['hide-output']) {
                return config;
            }
            this.log(`${config}`);
            return;
        }
        // SCHEMA
        try {
            const schema = (0, transpiler_1.stitch)(folder);
            try {
                (0, transpiler_1.validate)(schema, {
                    extensions: await (0, utils_1.getStepZenExtensions)(),
                });
                const file = path.join(schema, 'index.graphql');
                const stitched = fsx.readFileSync(file, 'utf8');
                this.log(stitched);
            }
            finally {
                (0, rmtemp_1.rmtemp)(schema);
            }
        }
        catch (error) {
            throw new errors_1.CLIError(chalk.red(error));
        }
    }
}
exports.default = Transpile;
Transpile.description = 'Transpile a GraphQL schema.';
Transpile.hidden = true;
Transpile.flags = {
    ...zen_command_1.default.flags,
    config: core_1.Flags.string({ hidden: true }),
    'hide-output': core_1.Flags.boolean({ hidden: true }),
    inspect: core_1.Flags.boolean({ char: 'i', hidden: true }),
    'inspect-after': core_1.Flags.boolean({ hidden: true }),
    'output-configuration': core_1.Flags.boolean(),
    silent: core_1.Flags.boolean(),
};
Transpile.args = {
    folder: core_1.Args.string({ required: true }),
};
//# sourceMappingURL=transpile.js.map