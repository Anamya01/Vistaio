"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright IBM Corp. 2020, 2024
const core_1 = require("@oclif/core");
const errors_1 = require("@oclif/core/lib/errors");
const chalk = require("chalk");
const flags_1 = require("../../generate/flags");
const flow2sdl_1 = require("../../generate/flow2sdl");
const helpers_1 = require("../../generate/helpers");
const import_command_1 = require("../../generate/import-command");
const constants_1 = require("../../shared/constants");
const header_1 = require("../../shared/header");
const inquirer = require("../../shared/inquirer");
const utils_1 = require("../../shared/utils");
class ImportFlow extends import_command_1.ImportCommandBase {
    get source() {
        return 'flow';
    }
    async import(commonOptions, workspace) {
        const { args, flags } = await this.parse(ImportFlow);
        const { configuration } = await this.ensureStepZenAccount({
            nonInteractive: flags['non-interactive'],
        });
        let endpoint = flags.endpoint;
        let headers = (0, helpers_1.parseHeaderFlags)(flags.header, flags['header-param']);
        if (!endpoint) {
            endpoint = `${(0, constants_1.getZenServUrl)(configuration)}/${workspace.endpoint}/__graphql`;
            headers = [
                { name: 'Authorization', value: `APIKey ${configuration.apikey}` },
            ];
        }
        const nonInteractiveOptions = {
            flow: args.flow,
            endpoint: endpoint,
            headers: headers,
        };
        let flow2sdlOptions;
        if (nonInteractiveOptions.flow) {
            // an ugly hint for the TS compiler because it is not smart enough to figure this :(
            const typedNonInteractiveOptions = nonInteractiveOptions;
            // run non-interactively
            flow2sdlOptions = {
                ...commonOptions,
                ...typedNonInteractiveOptions,
            };
        }
        else {
            if (flags['non-interactive']) {
                throw new errors_1.CLIError('Please provide a StepZen flow expression.' +
                    chalk `\nSee more help with {bold stepzen import flow --help}`);
            }
            // no parameters given: start an interactive prompt
            if (!flags.silent) {
                this.log();
                this.log(chalk `{bold stepzen import flow} - ` +
                    chalk.dim(`Import StepZen flow expression as a query field into your` +
                        ` GraphQL API.`));
                this.log();
            }
            // no parameters given: start an interactive prompt
            const interactiveOptions = await this.getImportOptionsInteractively(nonInteractiveOptions);
            flow2sdlOptions = {
                ...commonOptions,
                ...interactiveOptions,
                // include boths headers passed via flags and headers entered interactively
                headers: [
                    ...nonInteractiveOptions.headers,
                    ...interactiveOptions.headers,
                ],
            };
        }
        flow2sdlOptions.endpoint = (0, utils_1.rewriteLocalhostToHostGatewayInURL)(configuration, flow2sdlOptions.endpoint);
        return this.wrapInProgressAndTimeout((0, flow2sdl_1.flow2sdl)(flow2sdlOptions, configuration));
    }
    async getImportOptionsInteractively(defaults = {}) {
        const questions = inquirer.overrideDefaults([
            {
                name: 'flow',
                message: 'Flow expression, where each step is a field in the GraphQL schema',
                validate: input => input.trim() !== '',
            },
            {
                name: 'endpoint',
                message: 'What is the GraphQL endpoint URL?',
                validate: input => input.trim() !== '',
            },
            {
                name: 'header',
                type: 'input',
                message: 'Add an HTTP header, e.g. Header-Name: header value (leave blank for none)',
                validate: input => input === '' || header_1.HEADER_REGEX.test(input.trim()) || 'invalid header',
            },
        ], defaults);
        const answers = await inquirer.prompt('import-graphql', questions);
        const { result: header } = (0, header_1.parseHeader)(answers.header);
        return {
            flow: answers.flow,
            endpoint: answers.endpoint,
            headers: header ? [header] : [],
        };
    }
}
exports.default = ImportFlow;
ImportFlow.description = `Import StepZen flow expression as a query field into your GraphQL API.` +
    `\n` +
    chalk `\n{bold stepzen import flow} automatically introspects a GraphQL` +
    chalk ` endpoint and adds a {bold @sequence} implementing the given ` +
    `flow expression into your GraphQL schema.`;
ImportFlow.flags = {
    ...import_command_1.ImportCommandBase.flags,
    header: { ...flags_1.ImportFlags.header(), dependsOn: ['endpoint'] },
    endpoint: core_1.Flags.string({
        description: `Use a custom GraphQL schema instead of the project's schema as the` +
            ` schema providing the steps in the flow.`,
    }),
};
ImportFlow.args = {
    flow: core_1.Args.string({
        name: chalk `StepZen flow expression, e.g. {bold reply = prompt | llm}`,
    }),
};
//# sourceMappingURL=flow.js.map