"use strict";
// Copyright IBM Corp. 2020, 2024
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDockerImageVersions = exports.getIcrDockerImageDigest = exports.getIcrManifestUrl = exports.getLocalDockerImageDigest = exports.exec = void 0;
const chalk = require("chalk");
const shell = require("shelljs");
const debug_1 = require("debug");
const fetch_1 = require("@stepzen/fetch");
const constants_1 = require("./constants");
/**
 * Execute a command in a new shell process (sync) and return the result
 * object. Log both the command and the result into the `stepzen:docker` log.
 *
 * @param {*} command command
 * @returns {*} result from shelljs
 */
const exec = (command) => {
    const result = shell.exec(command, { silent: true });
    (0, debug_1.default)('stepzen:docker')(chalk `running {cyan ${command}}`);
    if (result.code === 0) {
        (0, debug_1.default)('stepzen:docker')(`\t--> ${result.stdout.trim()}`);
    }
    else {
        (0, debug_1.default)('stepzen:docker')(`\t--> FAILED (exit code ${result.code})\n${result.stderr.trim()}`);
    }
    return result;
};
exports.exec = exec;
/**
 * Get a Docker image digest by image name or image ID.
 *
 * @param {*} nameOrId name or ID of a Docker image
 * @returns {*} digest or error
 */
const getLocalDockerImageDigest = (nameOrId) => {
    const command = `docker image inspect -f "{{index .RepoDigests 0}}" ${nameOrId}`;
    const result = (0, exports.exec)(command);
    if (result.code !== 0) {
        return { error: { message: `Could not inspect the docker image ${nameOrId}` } };
    }
    const maybeDigest = result.stdout.trim();
    if (!maybeDigest) {
        (0, debug_1.default)('stepzen:docker')(`The image ${nameOrId} has no digest`);
        return { error: { message: `Could not inspect the docker image ${nameOrId}` } };
    }
    const match = maybeDigest.match(/sha256:[0-9a-f]+$/i);
    if (!match) {
        (0, debug_1.default)('stepzen:docker')(`Unexpected image digest format: ${maybeDigest}.` +
            ` Expected /sha256:[0-9a-f]+$/i`);
        return { error: { message: `Could not inspect the docker image ${nameOrId}` } };
    }
    return { result: match[0] };
};
exports.getLocalDockerImageDigest = getLocalDockerImageDigest;
const getIcrManifestUrl = (nameAndTag) => {
    const match = nameAndTag.match(
    // ICR
    /^icr\.io\/(?<repository>[^/]+)\/(?<image>[^/]+):(?<tag>.*)$/i);
    if (!match ||
        !match.groups ||
        !match.groups.repository ||
        !match.groups.image ||
        !match.groups.tag) {
        return {
            error: {
                message: `${nameAndTag} does not match the ICR naming pattern:` +
                    ` icr.io/[repository]/[image]:[tag]`,
            },
        };
    }
    const { repository, image, tag } = match.groups;
    return {
        result: `https://icr.io/v2/${repository}/${image}/manifests/${tag}`,
    };
};
exports.getIcrManifestUrl = getIcrManifestUrl;
/**
 * Fetch the most up-to-date image digest from a GCR by image name and tag
 *
 * @param {*} nameAndTag name or ID of a Docker image
 * @returns {*} digest or error
 */
const getIcrDockerImageDigest = async (nameAndTag) => {
    const { result: url, error } = (0, exports.getIcrManifestUrl)(nameAndTag);
    if (error) {
        (0, debug_1.default)('stepzen:docker')(`Failed to get a Docker Registry API URL for the '${nameAndTag}' image. ${error}`);
        return {
            error: {
                message: `Could not get the image digest for ${nameAndTag} because this version` +
                    ` of StepZen CLI only supports Docker images hosted in GCR.`,
            },
        };
    }
    try {
        (0, debug_1.default)('stepzen:docker')(`GCR API URL for the '${nameAndTag}' image: '${url}'`);
        const response = await (0, fetch_1.default)(url, {
            headers: {
                Accept: 'application/vnd.docker.distribution.manifest.list.v2+json',
            },
        });
        // Consume the response body to avoid the CLI hanging from unresolved response
        // https://github.com/steprz/stepzen-cli/issues/1032
        await response.text();
        (0, debug_1.default)('stepzen:docker')(`response status: ${response.status}`);
        const headers = Object.fromEntries([...response.headers]);
        (0, debug_1.default)('stepzen:docker')(`response headers:\n${JSON.stringify(headers, undefined, 2)}`);
        const maybeDigest = response.headers.get('docker-content-digest');
        if (!maybeDigest) {
            (0, debug_1.default)('stepzen:docker')(`failed to find the 'docker-content-digest' header in the response`);
            return {
                error: {
                    message: `Could not get the image digest for ${nameAndTag} from the remote registry.`,
                },
            };
        }
        return { result: maybeDigest };
    }
    catch (error2) {
        (0, debug_1.default)('stepzen:docker')(`Failed to fetch the image manifest from GCR. ${error2}`);
        return {
            error: {
                message: `Could not get the image digest for ${nameAndTag} from the remote registry.`,
            },
        };
    }
};
exports.getIcrDockerImageDigest = getIcrDockerImageDigest;
/**
 * Get the Docker image digests for the local and the latest remote
 * StepZen docker images.
 *
 * @returns {*} local and latest Docker image digests, or an error
 */
const getDockerImageVersions = async () => {
    const dockerCliPath = shell.which('docker');
    if (!dockerCliPath) {
        (0, debug_1.default)('stepzen:docker')('Failed to find the docker CLI binary in PATH');
        return { error: { message: 'Could not find Docker CLI' } };
    }
    (0, debug_1.default)('stepzen:docker')(`found Docker CLI at ${dockerCliPath}`);
    const command = `docker container inspect -f "{{println .Image}}{{.Config.Image}}" ${constants_1.STEPZEN_CONTAINER_NAME}`;
    const result = (0, exports.exec)(command);
    if (result.code !== 0) {
        // container does not exist => nothing to do
        return { error: { message: 'Could not find the local StepZen container' } };
    }
    const [localImageId, localImageName] = result.stdout.trim().split('\n');
    const { result: local, error: localError } = (0, exports.getLocalDockerImageDigest)(localImageId);
    if (localError) {
        return {
            error: { message: 'Could not get the local StepZen container version' },
        };
    }
    // The image registry has moved for GAR to ICR. If still running a GAR image, we should always upgrade to the latest ICR image.
    let imageForDigest;
    if (localImageName.startsWith('us-docker.pkg.dev')) {
        imageForDigest = `${constants_1.DEFAULT_STEPZEN_DOCKER_IMAGE}:${constants_1.DEFAULT_STEPZEN_DOCKER_TAG}`;
    }
    else {
        imageForDigest = localImageName;
    }
    const { result: latest, error: latestError } = await (0, exports.getIcrDockerImageDigest)(imageForDigest);
    if (latestError) {
        return {
            error: {
                message: 'Could not get the latest StepZen container version from IBM Container Registry',
            },
        };
    }
    (0, debug_1.default)('stepzen:docker')(`detected Docker image versions:` +
        `\n\tlocal: ${local}` +
        `\n\tlatest: ${latest}`);
    return { result: { local, latest } };
};
exports.getDockerImageVersions = getDockerImageVersions;
//# sourceMappingURL=docker.js.map