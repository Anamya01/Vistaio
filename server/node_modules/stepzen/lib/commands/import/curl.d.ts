import type { ArgOutput, FlagOutput, Input, ParserOutput } from '@oclif/core/lib/interfaces/parser';
import type { CurlImportOptions } from '../../generate/curl2sdl';
import { CommonImportOptions, ImportCommandBase } from '../../generate/import-command';
declare type InteractiveCurl2SdlOptions = Pick<CurlImportOptions, 'curlArgs' | 'queryName' | 'rootType' | 'typePrefix' | 'pathParams'>;
declare type CurlAnswers = {
    url: string;
    queryName: string;
    rootType: string;
    typePrefix: string;
    pathParams: string;
};
export default class ImportCurl extends ImportCommandBase {
    static description: string;
    get source(): "curl";
    static flags: {
        prefix: import("@oclif/core/lib/interfaces/parser").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        data: import("@oclif/core/lib/interfaces/parser").OptionFlag<string[] | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        request: import("@oclif/core/lib/interfaces/parser").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        url: import("@oclif/core/lib/interfaces/parser").OptionFlag<string[] | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        header: import("@oclif/core/lib/interfaces/parser").OptionFlag<string[] | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        'header-param': import("@oclif/core/lib/interfaces/parser").OptionFlag<string[] | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        'query-name': import("@oclif/core/lib/interfaces/parser").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        'query-type': import("@oclif/core/lib/interfaces/parser").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        'path-params': import("@oclif/core/lib/interfaces/parser").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        dir: import("@oclif/core/lib/interfaces/parser").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        silent: import("@oclif/core/lib/interfaces/parser").BooleanFlag<boolean>;
        name: import("@oclif/core/lib/interfaces/parser").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        overwrite: import("@oclif/core/lib/interfaces/parser").BooleanFlag<boolean>;
        help: import("@oclif/core/lib/interfaces/parser").BooleanFlag<void>;
        'non-interactive': import("@oclif/core/lib/interfaces/parser").BooleanFlag<boolean>;
    };
    static strict: boolean;
    protected import(commonOptions: CommonImportOptions): Promise<{
        error: {
            message: string;
        };
        result?: undefined;
    } | {
        result: import("../../generate/helpers").IntrospectionServiceResponse;
        error?: undefined;
    }>;
    protected parse<F extends FlagOutput, B extends FlagOutput, A extends ArgOutput>(options?: Input<F, B, A>, argv?: string[]): Promise<ParserOutput<F, B, A> & {
        argv: string[];
    }>;
    getImportOptionsInteractively(defaults?: Partial<CurlAnswers>): Promise<InteractiveCurl2SdlOptions>;
}
export {};
//# sourceMappingURL=curl.d.ts.map