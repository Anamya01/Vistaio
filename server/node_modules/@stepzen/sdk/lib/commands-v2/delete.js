"use strict";
// Copyright IBM Corp. 2020, 2024
Object.defineProperty(exports, "__esModule", { value: true });
const debug = require("debug");
const graphql_client_1 = require("../shared/graphql-client");
exports.default = async ({ account, adminKey, deploymentType, folder, name, sdkConfig, }) => {
    const { data, errors } = await (0, graphql_client_1.fetchZenCtlGraphQLQuery)({
        account,
        adminKey,
        deploymentType,
        query: `mutation ($a: String!, $dt: String!, $f: String!, $e: String!, $ak: String!) {
        removeEndpoint(
          account: $a
          deploymentType: $dt
          folderName: $f
          endpointName: $e
          adminkey: $ak
        ) {
          account_name
          folder_name
          endpoint_name
          updated_at
        }
      }`,
        variables: {
            a: account,
            dt: deploymentType,
            f: folder,
            e: name,
            ak: adminKey,
        },
        sdkConfig,
    });
    if (errors) {
        debug('stepzen:delete')('failed to execute stepzen.delete: ' + errors);
        // strip graphql-specific error details, leave only the message
        const message = errors
            .map(({ message }) => {
            if (message.startsWith('ERROR: invalid input value for enum zenctl.deployment_type')) {
                return (`Invalid deployment type: ${deploymentType}.` +
                    ` Please check the 'deploymentType' parameter.`);
            }
            return message;
        })
            .join('\n');
        return {
            data: undefined,
            error: {
                message,
            },
        };
    }
    return {
        data: data.removeEndpoint,
        error: undefined,
    };
};
//# sourceMappingURL=delete.js.map