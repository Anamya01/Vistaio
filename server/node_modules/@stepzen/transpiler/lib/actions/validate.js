"use strict";
// Copyright IBM Corp. 2020, 2024
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const fsx = require("fs-extra");
const os = require("os");
const path = require("path");
const ensure_query_and_mutation_types_1 = require("../utils/ensure-query-and-mutation-types");
const constants_1 = require("../utils/constants");
const validators_1 = require("../validators");
exports.default = (source, options = {
    extensions: '',
}) => {
    // Ensure source and output directories exist
    if (!fsx.existsSync(source)) {
        throw new Error(`Cannot find source directory ${source}`);
    }
    // Ensure index.graphql exists
    if (!fsx.existsSync(`${source}/index.graphql`)) {
        throw new Error(`Cannot find index.graphql in ${source}`);
    }
    // Get the index.graphql file
    const file = path.join(source, 'index.graphql');
    const index = fsx.readFileSync(file, 'utf8');
    // Parse
    let ast = (0, graphql_1.parse)(`${constants_1.EXPERIMENTAL_EXTENSIONS}${os.EOL}${options.extensions}${os.EOL}${index}`, {
        noLocation: true,
    });
    // We make an exception for 'no type Query' or 'no type Mutation'
    ast = (0, ensure_query_and_mutation_types_1.default)(ast);
    // Build and print, to validate
    (0, graphql_1.buildASTSchema)(ast);
    (0, graphql_1.print)(ast);
    // Custom validators
    for (const validator of validators_1.default) {
        validator(ast, source);
    }
    // Return true
    return true;
};
//# sourceMappingURL=validate.js.map