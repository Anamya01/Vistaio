import ZenCommand from '../shared/zen-command';
import type { ErrorOr, FlagsT, Workspace } from '../shared/types';
import type { IntrospectionServiceResponse } from './helpers';
export declare type OnConflictType = 'overwrite' | 'append';
export declare type CommonImportOptions = {
    name?: string;
    source: string;
    onConflict: OnConflictType;
};
export declare abstract class ImportCommandBase extends ZenCommand {
    protected abstract get source(): string;
    protected abstract import(commonOptions: CommonImportOptions, workspace: Workspace): Promise<ErrorOr<IntrospectionServiceResponse>>;
    static flags: {
        dir: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        silent: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        name: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        overwrite: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        help: import("@oclif/core/lib/interfaces").BooleanFlag<void>;
        'non-interactive': import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
    };
    run(): Promise<undefined>;
    protected ensureOnConflictBehavior(workspace: Workspace, flags: FlagsT<typeof ImportCommandBase>): Promise<OnConflictType>;
    protected wrapInProgressAndTimeout<T>(importPromise: Promise<ErrorOr<T>>): Promise<ErrorOr<T>>;
}
//# sourceMappingURL=import-command.d.ts.map