import { type Flow2SdlOptions } from '../../generate/flow2sdl';
import { ImportCommandBase, type CommonImportOptions } from '../../generate/import-command';
import { type Workspace } from '../../shared/types';
declare type InteractiveFlow2SdlOptions = Pick<Flow2SdlOptions, 'flow' | 'endpoint' | 'headers'>;
declare type FlowAnswers = {
    flow: string;
    endpoint: string;
    header: string;
};
export default class ImportFlow extends ImportCommandBase {
    static description: string;
    get source(): "flow";
    static flags: {
        header: {
            dependsOn: string[];
            name: string;
            char?: import("@oclif/core/lib/interfaces").AlphabetUppercase | import("@oclif/core/lib/interfaces").AlphabetLowercase | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            helpLabel?: string | undefined;
            helpGroup?: string | undefined;
            env?: string | undefined;
            hidden?: boolean | undefined;
            required?: boolean | undefined;
            exclusive?: string[] | undefined;
            exactlyOne?: string[] | undefined;
            relationships?: import("@oclif/core/lib/interfaces/parser").Relationship[] | undefined;
            deprecated?: true | import("@oclif/core/lib/interfaces").Deprecation | undefined;
            aliases?: string[] | undefined;
            deprecateAliases?: boolean | undefined;
            delimiter?: "," | undefined;
            type: "option";
            helpValue?: string | undefined;
            options?: string[] | undefined;
            multiple: false;
            parse: import("@oclif/core/lib/interfaces/parser").FlagParser<string[] | undefined, string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
            defaultHelp?: import("@oclif/core/lib/interfaces/parser").FlagDefaultHelp<string[] | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
            input: string[];
            default?: import("@oclif/core/lib/interfaces/parser").FlagDefault<string[] | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        } | {
            dependsOn: string[];
            name: string;
            char?: import("@oclif/core/lib/interfaces").AlphabetUppercase | import("@oclif/core/lib/interfaces").AlphabetLowercase | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            helpLabel?: string | undefined;
            helpGroup?: string | undefined;
            env?: string | undefined;
            hidden?: boolean | undefined;
            required?: boolean | undefined;
            exclusive?: string[] | undefined;
            exactlyOne?: string[] | undefined;
            relationships?: import("@oclif/core/lib/interfaces/parser").Relationship[] | undefined;
            deprecated?: true | import("@oclif/core/lib/interfaces").Deprecation | undefined;
            aliases?: string[] | undefined;
            deprecateAliases?: boolean | undefined;
            delimiter?: "," | undefined;
            type: "option";
            helpValue?: string | undefined;
            options?: string[] | undefined;
            multiple: true;
            parse: import("@oclif/core/lib/interfaces/parser").FlagParser<string[] | undefined, string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
            defaultHelp?: import("@oclif/core/lib/interfaces/parser").FlagDefaultHelp<string[] | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
            input: string[];
            default?: import("@oclif/core/lib/interfaces/parser").FlagDefault<(string[] | undefined)[] | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        };
        endpoint: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        dir: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        silent: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        name: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        overwrite: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        help: import("@oclif/core/lib/interfaces").BooleanFlag<void>;
        'non-interactive': import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
    };
    static args: {
        flow: import("@oclif/core/lib/interfaces/parser").Arg<string | undefined, Record<string, unknown>>;
    };
    protected import(commonOptions: CommonImportOptions, workspace: Workspace): Promise<import("../../shared/types").ErrorOr<import("../../generate/helpers").IntrospectionServiceResponse, {
        message: string;
    }>>;
    getImportOptionsInteractively(defaults?: Partial<FlowAnswers>): Promise<InteractiveFlow2SdlOptions>;
}
export {};
//# sourceMappingURL=flow.d.ts.map