import { SDKConfigurationV2 } from './shared/types';
export declare const ensureValidCredentials: (auth: {
    account: string;
    adminKey: string;
    deploymentType: string;
} | {
    publicAccountToken: string;
    deploymentType: string;
}, sdkConfig: SDKConfigurationV2) => Promise<import("./shared/types").StepZenCredentialsV2>;
export declare const createSdkClient: (auth: {
    account: string;
    adminKey: string;
    deploymentType: string;
} | {
    publicAccountToken: string;
    deploymentType: string;
}, sdkConfig: SDKConfigurationV2) => Promise<{
    readonly credentials: import("./shared/types").StepZenCredentialsV2;
    /**
     * Delete a GraphQL endpoint at StepZen.
     *
     * @param folder - folder name (e.g. `api`); will be a part of the endpoint URL
     * @param name - endpoint name (e.g. `users`); will be a part of the endpoint URL
     * @returns details of the deleted endpoint
     */
    delete: ({ folder, name }: {
        folder: string;
        name: string;
    }) => Promise<import("./shared/types").ZenCtlResponseV2<import("./shared/types").StepZenDeleteV2[]>>;
    /**
     * Create or update a GraphQL endpoint at StepZen.
     * The URL of the endpoint is formed as {StepZen instance URL}/{folder}/{name}/__graphql
     * e.g. https://account.stepzen.net/api/users/__graphql
     *
     * @param folder - folder name (e.g. `api`); will be a part of the endpoint URL
     * @param name - endpoint name (e.g. `users`); will be a part of the endpoint URL
     * @param directory - full path to a GraphQL schema directory (should have `index.graphql` in it)
     * @param config - full path to a config `.yml` file
     * @param public - whether or not to allow public access to the endpoint (`false` by default)
     * @returns details of the created / updated endpoint
     */
    deploy: ({ folder, name, directory, config, public: _public, }: {
        folder: string;
        name: string;
        directory: string;
        config?: string | undefined;
        public?: boolean | undefined;
    }) => Promise<import("./shared/types").ZenCtlResponseV2<import("./shared/types").StepZenEndpointV2>>;
    list: {
        /**
         * List deployed endpoints.
         *
         * @returns list of deployed endpoints
         */
        endpoints: () => Promise<import("./shared/types").ZenCtlResponseV2<import("./shared/types").StepZenEndpointV2[]>>;
    };
}>;
//# sourceMappingURL=client-v2.d.ts.map