"use strict";
// Copyright IBM Corp. 2020, 2024
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPortFromUrl = exports.isLocalhost = exports.parseHost = exports.appendPathnameIfEmpty = void 0;
const errors_1 = require("@oclif/core/lib/errors");
/**
 * Adds the path component to the URL if the URL is missing one.
 *
 * @param {*} url the URL
 * @param {*} path path component
 * @returns {*} the updated URL
 */
const appendPathnameIfEmpty = (url, path) => {
    const parsedUrl = new URL(url);
    if (parsedUrl.pathname === '/') {
        parsedUrl.pathname = path;
        return parsedUrl.toString();
    }
    return url;
};
exports.appendPathnameIfEmpty = appendPathnameIfEmpty;
const parseHost = (host) => {
    if (!host) {
        return { host: undefined, port: undefined, isValid: false };
    }
    let url;
    // Try parsing as a DNS name or an IPv4 address (possibly with a port)
    // e.g. "example.com:5432" or "[fedc:ba98:7654:3210:fedc:ba98:7654:3210]:5432"
    try {
        url = new URL(`http://${host}`);
    }
    catch {
        // Try parsing as an IPv6 address (without a port)
        // e.g. fedc:ba98:7654:3210:fedc:ba98:7654:3210
        try {
            url = new URL(`http://[${host}]`);
        }
        catch {
            // ignore
        }
    }
    if (!url) {
        return { host, port: undefined, isValid: false };
    }
    return {
        host: url.hostname,
        port: url.port || undefined,
        isValid: true,
    };
};
exports.parseHost = parseHost;
/**
 *
 * Returns whether the given URL or hostname refers to localhost (by name or loopback IP).
 *
 * @param {*} hostnameOrUrl a URL or hostname
 * @returns {*} true iff hostnameOrUrl refers to localhost
 */
function isLocalhost(hostnameOrUrl) {
    let hostname;
    try {
        // If it's a valid URL, use the Node's URL parser to extract the hostname
        // part of it
        hostname = new URL(hostnameOrUrl).hostname;
    }
    catch {
        // If it's not a valid URL, assume it's a hostname
        hostname = `${hostnameOrUrl}`.toLowerCase();
    }
    return ['localhost', '127.0.0.1', '::1'].includes(hostname);
}
exports.isLocalhost = isLocalhost;
/**
 *
 * Parses the port from an http/https URL.
 *
 * @param {*} url an http/https url
 * @returns {*} an integer port
 */
function getPortFromUrl(url) {
    const parsed = new URL(url);
    let port = parsed.port;
    if (parsed.protocol === 'https:') {
        if (!port) {
            port = '443';
        }
    }
    else if (parsed.protocol === 'http:') {
        if (!port) {
            port = '80';
        }
    }
    else {
        throw new errors_1.CLIError(`Expected http or https in URL ${url}`);
    }
    return parseInt(port, 10);
}
exports.getPortFromUrl = getPortFromUrl;
//# sourceMappingURL=url-helpers.js.map