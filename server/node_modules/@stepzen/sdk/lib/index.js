"use strict";
// Copyright IBM Corp. 2020, 2024
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchGraphQLQuery = void 0;
const tslib_1 = require("tslib");
const path = require("path");
const init_1 = require("./init");
tslib_1.__exportStar(require("./init"), exports);
tslib_1.__exportStar(require("./init-v2"), exports);
tslib_1.__exportStar(require("./shared/types"), exports);
var graphql_client_1 = require("./shared/graphql-client");
Object.defineProperty(exports, "fetchGraphQLQuery", { enumerable: true, get: function () { return graphql_client_1.fetchGraphQLQuery; } });
/**
 * The default SDK instance that does not know the name of the app using the SDK.
 * It tries to guess the app name from `process.argv`
 *
 * @deprecated use the init({appName: 'my-app/1.2.3'}) method to initialis an SDK instance
 */
const stepzen = (0, init_1.init)({
    // For legacy apps use the script name (e.g. `index.js` as the app name)
    // Fallback to `node` if this file is imported into an interactive node shell
    appName: path.basename(process.argv[1] || process.argv[0]),
});
exports.default = stepzen;
// Hack: support both ESM-style imports: `import stepzen from '@stepzen/sdk'`
// and keep the backwards-compat with CJS-style imports: `const stepzen = require('@stepzen/sdk')`
// NOTE: if at any point in the future there is a name collision between `stepzen` and ES exports
// this hack will break
module.exports = { ...module.exports, ...stepzen };
//# sourceMappingURL=index.js.map