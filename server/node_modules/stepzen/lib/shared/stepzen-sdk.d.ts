import { type MachineConfiguration, type ServiceInstanceV2 } from './types';
export declare const getStepzen1SDK: (zenServer: string) => {
    login: (adminkey: string, account?: string) => Promise<import("@stepzen/sdk").StepZenCredentials>;
    createAnonymousAccount: (uuid: string) => Promise<import("@stepzen/sdk").StepZenCredentials>;
    verify: (account: string, adminkey: string) => Promise<boolean>;
    client: (options: import("@stepzen/sdk").UserCredentialsClientOptions | import("@stepzen/sdk").AnonymousClientOptions) => Promise<{
        readonly credentials: import("@stepzen/sdk").StepZenCredentials;
        account: () => Promise<{
            account: string;
            apikey: string;
        } | {
            success: false;
            errors: string[];
        }>;
        deploy: (destination: string, properties: {
            configurationsets?: string[] | undefined;
            schema: string;
        }) => Promise<import("@stepzen/sdk").ZenCtlResponse>;
        list: {
            deployments: () => Promise<import("@stepzen/sdk").ZenCtlResponse>;
            configurationsets: () => Promise<import("@stepzen/sdk").ZenCtlResponse>;
            schemas: () => Promise<import("@stepzen/sdk").ZenCtlResponse>;
        };
        upload: {
            configurationset: (destination: string, file: string) => Promise<import("@stepzen/sdk").ZenCtlResponse>;
            schema: (destination: string, directory: string) => Promise<import("@stepzen/sdk").ZenCtlResponse>;
        };
    }>;
    userAgent: string;
    version: "v1";
};
export declare const getStepzen2SDK: (zenctlApiUrl: string, deploymentType: string) => {
    login: (adminKey: string, account?: string) => Promise<import("@stepzen/sdk").StepZenCredentialsV2>;
    createAnonymousAccount: (uuid: string) => Promise<import("@stepzen/sdk").StepZenCredentialsV2>;
    serviceInstance: ServiceInstanceV2;
    verify: (account: string, adminkey: string, deploymentType: string) => Promise<boolean>;
    client: (auth: {
        account: string;
        adminKey: string;
        deploymentType: string;
    } | {
        publicAccountToken: string;
        deploymentType: string;
    }) => Promise<{
        readonly credentials: import("@stepzen/sdk").StepZenCredentialsV2;
        delete: ({ folder, name }: {
            folder: string;
            name: string;
        }) => Promise<import("@stepzen/sdk").ZenCtlResponseV2<import("@stepzen/sdk").StepZenDeleteV2[]>>;
        deploy: ({ folder, name, directory, config, public: _public, }: {
            folder: string;
            name: string;
            directory: string;
            config?: string | undefined;
            public?: boolean | undefined;
        }) => Promise<import("@stepzen/sdk").ZenCtlResponseV2<import("@stepzen/sdk").StepZenEndpointV2>>;
        list: {
            endpoints: () => Promise<import("@stepzen/sdk").ZenCtlResponseV2<import("@stepzen/sdk").StepZenEndpointV2[]>>;
        };
    }>;
    userAgent: string;
    version: "v2";
};
export declare type SdkInterfaceV1 = ReturnType<typeof getStepzen1SDK>;
export declare type SdkInterfaceV2 = ReturnType<typeof getStepzen2SDK>;
export declare type SdkInterface = SdkInterfaceV1 | SdkInterfaceV2;
export declare const getSdkInterfaceV1: (configuration: MachineConfiguration) => SdkInterfaceV1;
export declare const hasSdkInterfaceV2: (configuration: MachineConfiguration) => string | false | undefined;
/**
 * Try using the ZenCtl2 API first, and if that throws fallback to using the
 * ZenCtl1 API. This logic allows a gradual transition of user accounts from
 * API v1 to API v2.
 *
 * @param {*} configuration `stepzen.config.yaml` file content
 * @param {*} fn function to execute with the `stepzen` API object (v2 or v1)
 * @returns {*} return value of `fn`
 */
export declare function tryZenCtl2ThenZenCtl1<R>(configuration: MachineConfiguration, fn: (stepzen: SdkInterface) => Promise<R>): Promise<{
    result: R;
    serviceInstance?: ServiceInstanceV2;
    configuration: MachineConfiguration;
    configMigrated: boolean;
}>;
//# sourceMappingURL=stepzen-sdk.d.ts.map