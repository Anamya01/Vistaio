import type { ExecutionResult } from 'graphql';
import { SDKConfigurationV2 } from './types';
export declare type GraphQLResponse<TData = Record<string, any>> = GraphQLSuccessResponse<TData> | GraphQLErrorResponse<TData>;
declare type GraphQLSuccessResponse<TData> = ExecutionResult<TData> & {
    data: TData;
    errors: undefined;
};
declare type GraphQLErrorResponse<TData> = ExecutionResult<TData> & Required<Pick<ExecutionResult<TData>, 'errors'>>;
export declare const fetchGraphQLQuery: <T = Record<string, any>>({ url, query, variables, operationName, headers, }: {
    url: URL | string;
    query: string;
    variables?: Record<string, any> | undefined;
    operationName?: string | undefined;
    headers?: Record<string, any> | undefined;
}) => Promise<ExecutionResult<T, import("graphql/jsutils/ObjMap").ObjMap<unknown>>>;
export declare const fetchZenCtlGraphQLQuery: <T = Record<string, any>>({ account, adminKey, deploymentType, query, variables, sdkConfig, }: {
    account: string;
    adminKey: string;
    deploymentType: string;
    query: string;
    variables?: Record<string, any> | undefined;
    sdkConfig: SDKConfigurationV2;
}) => Promise<GraphQLResponse<T>>;
export declare const fetchPublicAccountGraphQLQuery: <T = Record<string, any>>({ url, query, variables, sdkConfig, }: {
    url: URL | string;
    query: string;
    variables?: Record<string, any> | undefined;
    sdkConfig: SDKConfigurationV2;
}) => Promise<GraphQLResponse<T>>;
export {};
//# sourceMappingURL=graphql-client.d.ts.map