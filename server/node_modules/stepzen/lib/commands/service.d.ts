import * as shell from 'shelljs';
import { FlagsT, StepZenCredentialsV2 } from '../shared/types';
import ZenCommand from '../shared/zen-command';
declare type DockerContainerStatus = 'not-created' | 'created' | 'restarting' | 'running' | 'paused' | 'exited' | 'dead';
export default class Service extends ZenCommand {
    static description: string;
    static flags: {
        dsn: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        'reset-auto': import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        prompt: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        port: import("@oclif/core/lib/interfaces").OptionFlag<number | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        help: import("@oclif/core/lib/interfaces").BooleanFlag<void>;
        'non-interactive': import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
    };
    static args: {
        action: import("@oclif/core/lib/interfaces/parser").Arg<string | undefined, Record<string, unknown>>;
    };
    run(): Promise<void>;
    getPorts(flags: FlagsT<typeof Service>): Promise<{
        port: number;
        legacyPorts: Set<number>;
    }>;
    ensureDockerInPath(): Promise<void>;
    getDockerContainerStatus(containerName: string): Promise<DockerContainerStatus>;
    ensureDockerNetwork(): Promise<void>;
    createDockerContainers(flags: FlagsT<typeof Service>): Promise<DockerContainerStatus>;
    createDockerContainer(args: {
        image: string;
        containerName: string;
        environment: Record<string, string>;
        secretMasker: {
            [_: string]: (_: string) => string;
        };
        ports: {
            host: number;
            container: number;
        }[];
        pull: string;
        network: string | undefined;
        hostGatewayParameter: boolean;
    }): Promise<void>;
    startDockerContainer(containerName: string): Promise<DockerContainerStatus>;
    startDockerContainers(port: number): Promise<{
        status: DockerContainerStatus;
        credentials: StepZenCredentialsV2;
    }>;
    stopDockerContainers(): Promise<DockerContainerStatus>;
    stopDockerContainer(containerName: string): Promise<DockerContainerStatus>;
    removeDockerContainers({ ignoreErrors, }?: {
        ignoreErrors?: boolean;
    }): Promise<DockerContainerStatus>;
    removeDockerContainer({ containerName, ignoreErrors, }: {
        containerName: string;
        ignoreErrors?: boolean;
    }): Promise<DockerContainerStatus>;
    getDockerContainerLogs({ ignoreErrors, }?: {
        ignoreErrors?: boolean;
    }): Promise<{
        stdout?: string;
        stderr?: string;
    }>;
    execInDockerContainer(command: string): Promise<shell.ShellString>;
    getDsnFromDockerContainer(): Promise<string | undefined>;
    printServiceStatusMessage(status: DockerContainerStatus): Promise<void>;
    getStepZenHealthCheck(port: number): Promise<boolean>;
    waitForStepZenToStart({ port, timeoutMs, }: {
        port: number;
        timeoutMs: number;
    }): Promise<{
        isHealthy: boolean;
        credentials: StepZenCredentialsV2 | undefined;
    }>;
    getStepZenDefaultCredentials(): Promise<StepZenCredentialsV2 | undefined>;
    createLocalCredentialsFile({ port, credentials, }: {
        port: number;
        credentials: StepZenCredentialsV2;
    }): Promise<void>;
    validateProvidedDsn(flags: FlagsT<typeof Service>): string | undefined;
}
export {};
//# sourceMappingURL=service.d.ts.map