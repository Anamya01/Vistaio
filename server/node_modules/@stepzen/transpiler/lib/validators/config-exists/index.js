"use strict";
// Copyright IBM Corp. 2020, 2024
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const lodash_1 = require("lodash");
const fs = require("fs");
const path = require("path");
const yaml = require("yaml");
const STEPZEN_DEFAULTS = [
    'fedex_default',
    'holidayapi_default',
    'ipapi_default',
    'owm_default',
    'ups_default',
];
exports.default = (ast, source) => {
    let configs = [];
    (0, graphql_1.visit)(ast, {
        Argument(node) {
            const name = node.name?.value;
            const value = node.value?.value;
            if (name === 'configuration') {
                configs = configs.concat(value);
            }
        },
    });
    configs = (0, lodash_1.uniq)(configs);
    configs = (0, lodash_1.filter)(configs, config => !STEPZEN_DEFAULTS.includes(config));
    if (configs.length > 0) {
        const sourceConfig = path.join(source, 'config.yaml');
        if (!fs.existsSync(sourceConfig)) {
            throw new Error('No config.yaml found');
        }
        const content = fs.readFileSync(sourceConfig, 'utf8');
        const asYaml = yaml.parse(content);
        for (const config of configs) {
            const found = asYaml?.configurationset?.find((c) => {
                return c?.configuration?.name === config;
            });
            if (!found) {
                throw new Error(`Could not find configuration item for "${config}"`);
            }
        }
    }
    return true;
};
//# sourceMappingURL=index.js.map