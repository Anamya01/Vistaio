"use strict";
// Copyright IBM Corp. 2020, 2024
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const zen_command_1 = require("../../shared/zen-command");
const check_upgrade_1 = require("../prerun/check-upgrade");
// Override the oclif's `version` command
// https://github.com/oclif/oclif/issues/254#issuecomment-591433963
const hook = async function (options) {
    if (!options.id) {
        return;
    }
    const command = options.id.toLowerCase();
    if (command === '-v' ||
        command === '--version' ||
        // handle `stepzen version` but not `stepzen version --help`
        (command === 'version' && options.argv.length === 0)) {
        // default implementation
        this.log(this.config.userAgent);
        // parse the command line to skip the upgrade check if running non-interactive
        const { flags } = await core_1.Parser.parse(options.argv, zen_command_1.default);
        if (!flags['non-interactive']) {
            const upgradeCheck = await (0, check_upgrade_1.checkForNpmUpdate)(this.config.version);
            if (upgradeCheck.message) {
                this.log('');
                this.log(upgradeCheck.message);
            }
            else if (!upgradeCheck.failed) {
                this.log('You are using the latest version.');
            }
        }
        // Exit to prevent the default impl from running
        // Not using this.exit() because of https://github.com/oclif/oclif/issues/1083
        // eslint-disable-next-line unicorn/no-process-exit, no-process-exit
        process.exit(0);
    }
};
exports.default = hook;
//# sourceMappingURL=version.js.map