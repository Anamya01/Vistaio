import * as shell from 'shelljs';
import type { ErrorOr } from './types';
/**
 * Execute a command in a new shell process (sync) and return the result
 * object. Log both the command and the result into the `stepzen:docker` log.
 *
 * @param {*} command command
 * @returns {*} result from shelljs
 */
export declare const exec: (command: string) => shell.ShellString;
/**
 * Get a Docker image digest by image name or image ID.
 *
 * @param {*} nameOrId name or ID of a Docker image
 * @returns {*} digest or error
 */
export declare const getLocalDockerImageDigest: (nameOrId: string) => ErrorOr<string>;
export declare const getIcrManifestUrl: (nameAndTag: string) => ErrorOr<string>;
/**
 * Fetch the most up-to-date image digest from a GCR by image name and tag
 *
 * @param {*} nameAndTag name or ID of a Docker image
 * @returns {*} digest or error
 */
export declare const getIcrDockerImageDigest: (nameAndTag: string) => Promise<ErrorOr<string>>;
/**
 * Get the Docker image digests for the local and the latest remote
 * StepZen docker images.
 *
 * @returns {*} local and latest Docker image digests, or an error
 */
export declare const getDockerImageVersions: () => Promise<ErrorOr<{
    local: string;
    latest: string;
}, {
    message: string;
}>>;
//# sourceMappingURL=docker.d.ts.map