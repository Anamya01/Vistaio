"use strict";
// Copyright IBM Corp. 2020, 2024
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const chalk = require("chalk");
const configuration_1 = require("../shared/configuration");
const constants_1 = require("../shared/constants");
const utils_1 = require("../shared/utils");
const zen_command_1 = require("../shared/zen-command");
class WhoAmI extends zen_command_1.default {
    async run() {
        const { flags } = await this.parse(WhoAmI);
        const configuration = await (0, configuration_1.readConfiguration)();
        if (!('account' in configuration)) {
            this.log('You are not logged in.');
            const exitCode = flags.account || flags.adminkey || flags.apikey ? 1 : 0;
            return this.exit(exitCode);
        }
        if (configuration.account.startsWith('public')) {
            this.log(`Account: ${chalk.bold(configuration.account)}`);
            return;
        }
        const domain = (0, constants_1.getZenServDomain)(configuration, { includePort: true });
        const details = {
            domain,
            account: `${configuration.account}  `,
            adminkey: 'not set',
            apikey: 'not set',
        };
        if (flags.domain) {
            this.log(domain);
            return;
        }
        if (flags.account) {
            this.log(configuration.account);
            return;
        }
        if (flags.adminkey) {
            if (!configuration.adminkey) {
                this.log(details.adminkey);
                this.exit(1);
            }
            this.log(configuration.adminkey);
            return;
        }
        if (flags.apikey) {
            if (!configuration.apikey) {
                this.log(details.apikey);
                this.exit(1);
            }
            this.log(configuration.apikey);
            return;
        }
        if (configuration.adminkey) {
            if (flags.showkeys) {
                details.adminkey = configuration.adminkey;
            }
            else {
                details.adminkey = (0, utils_1.maskStepZenKey)(configuration.adminkey);
            }
        }
        if (configuration.apikey) {
            if (flags.showkeys) {
                details.apikey = configuration.apikey;
            }
            else {
                details.apikey = (0, utils_1.maskStepZenKey)(configuration.apikey);
            }
        }
        this.log();
        this.log(`Domain: ${chalk.bold(details.domain)}`);
        this.log(`Account: ${chalk.bold(details.account)}`);
        this.log(`Admin key: ${chalk.bold(details.adminkey)}`);
        this.log(`API key: ${chalk.bold(details.apikey)}`);
        this.log();
    }
}
exports.default = WhoAmI;
WhoAmI.description = 'View your StepZen credentials.';
WhoAmI.flags = {
    ...zen_command_1.default.flags,
    showkeys: core_1.Flags.boolean({
        default: false,
        exclusive: ['account', 'adminkey', 'apikey', 'domain'],
    }),
    account: core_1.Flags.boolean({
        default: false,
        exclusive: ['showkeys', 'adminkey', 'apikey', 'domain'],
    }),
    adminkey: core_1.Flags.boolean({
        default: false,
        exclusive: ['showkeys', 'account', 'apikey', 'domain'],
    }),
    apikey: core_1.Flags.boolean({
        default: false,
        exclusive: ['showkeys', 'account', 'adminkey', 'domain'],
    }),
    domain: core_1.Flags.boolean({
        default: false,
        exclusive: ['showkeys', 'account', 'adminkey', 'apikey'],
    }),
};
//# sourceMappingURL=whoami.js.map