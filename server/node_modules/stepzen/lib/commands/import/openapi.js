"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright IBM Corp. 2020, 2024
const core_1 = require("@oclif/core");
const chalk = require("chalk");
const fs = require("fs");
const path = require("path");
const import_command_1 = require("../../generate/import-command");
const openapi2sdl_1 = require("../../generate/openapi2sdl");
const configuration_1 = require("../../shared/configuration");
const inquirer = require("../../shared/inquirer");
const errors_1 = require("@oclif/core/lib/errors");
const constants_1 = require("../../shared/constants");
class ImportOpenApi extends import_command_1.ImportCommandBase {
    get source() {
        return 'openapi';
    }
    ensureOpenApiSpecFile(openapi, basedir) {
        const abspath = path.resolve(basedir, openapi);
        if (!fs.existsSync(abspath)) {
            throw new errors_1.CLIError(`File does not exist: cannot find the OpenAPI spec file ${openapi}` +
                ` in the workspace directory ${basedir}. Please make sure the file` +
                ` name is correct and the file exists.`);
        }
        const extension = path.extname(openapi);
        if (extension !== '.yaml' &&
            extension !== '.yml' &&
            extension !== '.json') {
            throw new errors_1.CLIError(chalk `The {bold ${extension}} file type is not supported.` +
                chalk ` {bold stepzen import openapi} currently supports only YAML` +
                chalk ` and JSON files.`);
        }
    }
    async import(commonOptions, workspace) {
        const { args, flags } = await this.parse(ImportOpenApi);
        this.warn(chalk `\n{yellow {bold stepzen import openapi} is in preview and} ` +
            chalk `{yellow does not support all OpenAPI features yet.}` +
            `\n` +
            chalk `{yellow We welcome your feedback on Discord (${constants_1.STEPZEN_DISCORD_URL})}`);
        this.log();
        if (args.openapi) {
            this.ensureOpenApiSpecFile(args.openapi, workspace.directory);
        }
        const nonInteractiveOptions = {
            openapi: args.openapi,
        };
        let openapi2sdlOptions;
        if (nonInteractiveOptions.openapi) {
            // an ugly hint for the TS compiler because it is not smart enough to figure this :(
            const typedNonInteractiveOptions = nonInteractiveOptions;
            // run non-interactively
            openapi2sdlOptions = {
                ...commonOptions,
                ...typedNonInteractiveOptions,
            };
        }
        else {
            if (flags['non-interactive']) {
                throw new errors_1.CLIError('Please provide an OpenAPI spec file.' +
                    chalk `\nSee more help with {bold stepzen import openapi --help}`);
            }
            // no parameters given: start an interactive prompt
            if (!flags.silent) {
                this.log();
                this.log(chalk `{bold stepzen import openapi} - ` +
                    chalk.dim('introspect an OpenAPI spec file and extend your GraphQL schema' +
                        ' with the types, queries and mutations for accessing this' +
                        ' REST API through a StepZen API.'));
                this.log();
            }
            // no parameters given: start an interactive prompt
            const interactiveOptions = await this.getImportOptionsInteractively(nonInteractiveOptions, workspace.directory);
            openapi2sdlOptions = {
                ...commonOptions,
                ...interactiveOptions,
            };
        }
        openapi2sdlOptions.openapi = fs.readFileSync(openapi2sdlOptions.openapi, 'utf-8');
        const configuration = await (0, configuration_1.readConfiguration)();
        return this.wrapInProgressAndTimeout((0, openapi2sdl_1.openapi2sdl)(openapi2sdlOptions, configuration));
    }
    async getImportOptionsInteractively(defaults = {}, basedir) {
        const questions = inquirer.overrideDefaults([
            {
                name: 'openapi',
                message: 'Path to an OpenAPI spec file on your local machine',
                validate: input => {
                    try {
                        this.ensureOpenApiSpecFile(input, basedir);
                        return true;
                    }
                    catch (error) {
                        return error.message;
                    }
                },
            },
        ], defaults);
        const answers = await inquirer.prompt('import-openapi', questions);
        return {
            openapi: answers.openapi,
        };
    }
}
exports.default = ImportOpenApi;
ImportOpenApi.description = `Import a REST API from an OpenAPI spec as a subgraph into your GraphQL` +
    ` API.` +
    `\n` +
    chalk `\n{bold stepzen import openapi} automatically introspects an` +
    ` OpenAPI spec file, generates a GraphQL schema for accessing the REST` +
    ` API it describes through a StepZen API, and adds the generated types,` +
    ` queries, mutations and subscriptions for accessing this REST API` +
    ` through a StepZen API into your GraphQL schema.`;
// OpenAPI import is not yet GA
ImportOpenApi.hidden = true;
ImportOpenApi.flags = {
    ...import_command_1.ImportCommandBase.flags,
};
ImportOpenApi.args = {
    openapi: core_1.Args.string({
        name: 'OpenAPI spec file (YAML or JSON)',
    }),
};
//# sourceMappingURL=openapi.js.map