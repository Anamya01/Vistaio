"use strict";
// Copyright IBM Corp. 2020, 2024
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_client_1 = require("../shared/graphql-client");
exports.default = async ({ account, adminKey, deploymentType, sdkConfig, }) => {
    const { data, errors } = await (0, graphql_client_1.fetchZenCtlGraphQLQuery)({
        account,
        adminKey,
        deploymentType,
        query: `query (
      $account: String!
      $adminKey: String!
      $deploymentType: String!
    ) {
      accounts: account(
        account: $account
        adminkey: $adminKey
        deploymentType: $deploymentType
      ) {
        deploymentType: account_deployment_type
        account: account_name
        ownerEmail: account_owner_email
        adminKey: key_value_admin
        apiKeysAsJsonArray: key_value_api
      }
    }`,
        variables: {
            account,
            adminKey,
            deploymentType,
        },
        sdkConfig,
    });
    if (errors) {
        // strip graphql-specific error details, leave only the message
        const message = errors
            .map(({ message }) => message.startsWith('ERROR: invalid input value for enum zenctl.deployment_type')
            ? `Invalid deployment type: ${deploymentType}`
            : message)
            .join('\n');
        return {
            data: undefined,
            error: {
                message,
            },
        };
    }
    const accounts = data.accounts.filter(Boolean);
    if (!accounts.length) {
        return {
            data: undefined,
            error: {
                message: 'Your credentials are invalid',
            },
        };
    }
    return {
        data: {
            account: accounts[0].account,
            deploymentType: accounts[0].deploymentType,
            ownerEmail: accounts[0].ownerEmail,
            adminKey: accounts[0].adminKey,
            apiKeys: JSON.parse(accounts[0].apiKeysAsJsonArray),
        },
        error: undefined,
    };
};
//# sourceMappingURL=account.js.map