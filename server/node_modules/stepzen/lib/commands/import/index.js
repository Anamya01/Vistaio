"use strict";
// Copyright IBM Corp. 2020, 2024
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const errors_1 = require("@oclif/core/lib/errors");
const errors_2 = require("@oclif/core/lib/parser/errors");
const chalk = require("chalk");
const constants_1 = require("../../shared/constants");
const inquirer = require("../../shared/inquirer");
const utils_1 = require("../../shared/utils");
const zen_command_1 = require("../../shared/zen-command");
const curl_1 = require("./curl");
const flow_1 = require("./flow");
const graphql_1 = require("./graphql");
const mysql_1 = require("./mysql");
const postgresql_1 = require("./postgresql");
const presto_1 = require("./presto");
const snowflake_1 = require("./snowflake");
const SOURCES = ['curl', 'graphql', 'mysql', 'postgresql', 'snowflake'];
class Import extends zen_command_1.default {
    async run() {
        const { args, flags } = await this.parse(Import);
        let sourceArg;
        const argvMinusSource = [...this.argv];
        if (args.source) {
            sourceArg = args.source;
            argvMinusSource.shift();
        }
        else {
            if (flags['non-interactive']) {
                throw new errors_1.CLIError(chalk `The {bold SOURCE} argument is required when running in a non-interactive mode.` +
                    chalk `\nSee more help with {bold stepzen import --help}`);
            }
            this.log();
            this.log(chalk `{bold stepzen import}  - ` +
                chalk.dim('introspect an external data source and extend your GraphQL' +
                    ' schema with the types, queries and mutations for accessing' +
                    ' this data source through your StepZen API.'));
            this.log();
            const answers = await inquirer.prompt('import', [
                {
                    name: 'source',
                    message: 'What kind of data source do you want to import?',
                    type: 'list',
                    loop: false,
                    pageSize: 10,
                    choices: [
                        { value: 'curl', name: 'REST' },
                        { value: 'graphql', name: 'GraphQL' },
                        { type: 'separator' },
                        { value: 'mysql', name: 'MySQL' },
                        { value: 'postgresql', name: 'PostgreSQL' },
                        // the GA version of the introspection service does not support Presto yet
                        ...((0, utils_1.getFeatureFlag)(constants_1.ENABLE_PRESTO_IMPORT)
                            ? [{ value: 'presto', name: 'Presto' }]
                            : []),
                        { value: 'singlestore', name: 'SingleStore' },
                        { value: 'snowflake', name: 'Snowflake' },
                    ],
                },
            ]);
            sourceArg = answers.source;
        }
        // Get the schema you're asking for; may be a DSN
        const { source, dsn } = this.parseSourceArg(sourceArg);
        let ImportCommand;
        switch (source) {
            case 'curl':
                if (dsn) {
                    throw new errors_1.CLIError(`Please use ${chalk.bold('stepzen import curl [url]')}`);
                }
                ImportCommand = curl_1.default;
                break;
            case 'flow':
                if (dsn) {
                    throw new errors_1.CLIError(`Please use ${chalk.bold('stepzen import flow [flow]')}`);
                }
                ImportCommand = flow_1.default;
                break;
            case 'graphql':
                if (dsn) {
                    throw new errors_1.CLIError(`Please use ${chalk.bold('stepzen import graphql [url]')}`);
                }
                ImportCommand = graphql_1.default;
                break;
            case 'mysql':
                ImportCommand = mysql_1.default;
                break;
            case 'postgresql':
                ImportCommand = postgresql_1.default;
                break;
            case 'snowflake':
                ImportCommand = snowflake_1.default;
                break;
            case 'presto':
                ImportCommand = presto_1.default;
                break;
            default:
                throw new errors_1.CLIError(chalk `Unsupported data source: {bold ${source}}.` +
                    chalk `\n\tStepZen CLI does not support introspection and automatic` +
                    chalk ` GraphQL schema generation for {bold ${source}} data sources.` +
                    chalk ` Please write a schema for it manually.` +
                    chalk `\n\tSee {bold stepzen import --help} for a list of supported` +
                    chalk ` data sources.`);
        }
        return ImportCommand.run(dsn
            ? [dsn, ...argvMinusSource, '--silent']
            : [...argvMinusSource, '--silent']);
    }
    // Ignore the "unknown flag" errors if the SOURCE arg is provided.
    //
    // Allow the `import [DSN] [extra-flags]` syntax without having to declare
    // flags of each DSN-supporting import command in this command as well.
    //
    // e.g. `import postgresql://user:password@host:port/database --name sales --db-link-types`
    async parse(options, argv = this.argv) {
        try {
            const parsed = await super.parse(options, argv);
            return parsed;
        }
        catch (error) {
            if (error instanceof errors_2.CLIParseError &&
                error.parse.output &&
                error.parse.output.args.source &&
                error.parse.output.nonExistentFlags) {
                return error.parse.output;
            }
            throw error;
        }
    }
    parseSourceArg(arg) {
        const trimmed = arg.trim();
        const hasDsn = trimmed.includes('://');
        let source;
        let dsn;
        if (hasDsn) {
            source = trimmed.split('://')[0];
            dsn = trimmed;
        }
        else {
            // Now supports importing only one schema at a time:
            // https://github.com/steprz/stepzen-cli/issues/628
            if (trimmed.includes(',') || trimmed.includes(' ')) {
                throw new errors_1.CLIError("Cannot import multiple schemas in one command; please specify only one (e.g. 'stepzen import mysql')");
            }
            source = trimmed;
        }
        // support `postgres` as an alias to `postgresql`
        // https://github.com/steprz/stepzen-cli/issues/431
        if (source.toLowerCase() === 'postgres') {
            source = 'postgresql';
        }
        // treat `singlestore` as an alias to `mysql`
        if (source.toLowerCase() === 'singlestore') {
            source = 'mysql';
        }
        return { source, dsn };
    }
}
exports.default = Import;
Import.description = chalk `Import a schema for an external data source or an API endpoint into your GraphQL API.` +
    chalk `\nSee more details with {bold stepzen import [SOURCE] --help}`;
Import.flags = {
    ...zen_command_1.default.flags,
    dir: core_1.Flags.string({ description: 'Working directory' }),
};
Import.args = {
    source: core_1.Args.string({
        description: chalk `kind of the data source: ${SOURCES.map(s => chalk.bold(s)).join(', ')} (or a full DSN string)`,
    }),
};
//# sourceMappingURL=index.js.map