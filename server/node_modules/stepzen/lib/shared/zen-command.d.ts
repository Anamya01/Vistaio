import { Command } from '@oclif/core';
import type { ArgOutput, FlagOutput, Input, ParserOutput } from '@oclif/core/lib/interfaces/parser';
import { LoggedInMachineConfiguration, LoggedOutMachineConfiguration, MachineConfiguration, ServiceInstanceV2, Workspace } from './types';
export declare abstract class ZenCommand extends Command {
    static flags: {
        help: import("@oclif/core/lib/interfaces/parser").BooleanFlag<void>;
        'non-interactive': import("@oclif/core/lib/interfaces/parser").BooleanFlag<boolean>;
    };
    getServiceInstanceIfLocal(configuration?: MachineConfiguration): Promise<ServiceInstanceV2 | undefined>;
    awaitStepZenServiceUpIfLocal(configuration?: MachineConfiguration): Promise<void>;
    awaitIntrospectionServiceUpIfLocal(configuration?: MachineConfiguration): Promise<void>;
    ensureStepZenAccount(options?: {
        nonInteractive?: boolean;
    }): Promise<{
        configuration: LoggedInMachineConfiguration;
    }>;
    ensureStepZenWorkspace(options?: {
        directory?: string;
        endpoint?: string;
        nonInteractive?: boolean;
        silent?: boolean;
    }): Promise<Workspace>;
    promptUserToLogIn(initialConfiguration: LoggedOutMachineConfiguration): Promise<{
        configuration: LoggedInMachineConfiguration;
    }>;
    exit(code?: number): never;
    protected parse<F extends FlagOutput, B extends FlagOutput, A extends ArgOutput>(options?: Input<F, B, A>, argv?: string[]): Promise<ParserOutput<F, B, A> & {
        argv: string[];
    }>;
}
export default ZenCommand;
//# sourceMappingURL=zen-command.d.ts.map