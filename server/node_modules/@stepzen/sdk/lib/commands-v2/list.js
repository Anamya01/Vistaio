"use strict";
// Copyright IBM Corp. 2020, 2024
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_client_1 = require("../shared/graphql-client");
exports.default = async ({ account, deploymentType, adminKey, sdkConfig, }) => {
    const { data, errors } = await (0, graphql_client_1.fetchZenCtlGraphQLQuery)({
        account,
        adminKey,
        deploymentType,
        query: /* GraphQL */ `
      query ($account: String!, $deploymentType: String!, $adminKey: String!) {
        endpoints: endpointsForAccount(
          account: $account
          deploymentType: $deploymentType
          adminkey: $adminKey
        ) {
          account: account_name
          deploymentType: deployment_type
          folderName: folder_name
          endpointName: endpoint_name
          public: endpoint_public
          endpointType: endpoint_type
          createdAt: created_at
          updatedAt: updated_at
        }
      }
    `,
        variables: {
            account,
            deploymentType,
            adminKey,
        },
        sdkConfig,
    });
    if (errors) {
        // strip graphql-specific error details, leave only the message
        const message = errors
            .map(({ message }) => {
            if (message.startsWith('ERROR: invalid input value for enum zenctl.deployment_type')) {
                return (`Invalid deployment type: ${deploymentType}.` +
                    ` Please check the 'deploymentType' parameter.`);
            }
            return message;
        })
            .join('\n');
        return {
            data: undefined,
            error: {
                message,
            },
        };
    }
    // The case with data.endpoints === [] is ambiguous.
    // It may mean "invalid credentials" and it may mean "no endpoints".
    // At this point it makes more sense to assume "no endpoints" since
    // the "invalid credentials" error would be detected earlier, when
    // creating an SDK client instance.
    // See https://github.com/steprz/zen/issues/6361
    const endpoints = data.endpoints.map(endpoint => ({
        account: endpoint.account,
        deploymentType: endpoint.deploymentType,
        folderName: endpoint.folderName,
        endpointName: endpoint.endpointName,
        public: endpoint.public,
        endpointType: endpoint.endpointType,
        createdAt: new Date(endpoint.createdAt),
        updatedAt: new Date(endpoint.updatedAt),
    }));
    return {
        data: endpoints,
        error: undefined,
    };
};
//# sourceMappingURL=list.js.map