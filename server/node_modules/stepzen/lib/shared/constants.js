"use strict";
// Copyright IBM Corp. 2020, 2024
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDBIntrospectionUrl = exports.getIntrospectionUrl = exports.getZenServDomain = exports.getZenServUrl = exports.getZenCtl2Url = exports.getZenCtlUrl = exports.getZenServUrlTemplate = exports.getZenCtlUrlTemplate = exports.getDeploymentType = exports.ENABLE_PRESTO_IMPORT = exports.DETECT_NAME_CONFLICTS = exports.STEPZEN_DISCORD_URL = exports.STEPZEN_AUTODB_DSN = exports.STEPZEN_AUTODB_PASSWORD = exports.STEPZEN_AUTODB_USER = exports.STEPZEN_AUTODB_DATABASE = exports.STEPZEN_AUTODB_IMAGE = exports.STEPZEN_AUTODB_CONTAINER_NAME = exports.STEPZEN_CONTAINER_NAME = exports.STEPZEN_CONTAINER_NETWORK = exports.DEFAULT_STEPZEN_DOCKER_TAG = exports.DEFAULT_STEPZEN_DOCKER_IMAGE = exports.DEFAULT_STEPZEN_DBINTROSPECTION_SERVER_URL = exports.DEFAULT_STEPZEN_JSON2SDL_SERVER_URL = exports.DBINTROSPECTION_URL_PATH = exports.INTROSPECTION_URL_PATH = exports.ZENCTL2_PUBLIC_ACCOUNT_URL = exports.ZENCTL2_URL = exports.ADMIN_ACCOUNT_URL = exports.ADMIN_UPLOAD_URL = exports.ADMIN_LIST_URL = exports.ADMIN_DEPLOY_URL = exports.DEFAULT_STEPZEN_SERVER_URL = exports.STEPZEN_HISTORY_FILE = exports.STEPZEN_HISTORY_DIRECTORY = exports.STEPZEN_LOCAL_CONFIG_FILE = exports.DEFAULT_STEPZEN_DEPLOYMENT_TYPE = exports.STEPZEN_CONFIG_FILE = exports.STEPZEN_LAST_UPDATE_CHECK_TIMESTAMP = exports.STEPZEN_CONFIG_DIRECTORY = void 0;
// This file contains constants and all magic strings
const dotenv = require("dotenv");
const debug = require("debug");
const os = require("os");
const path = require("path");
const url_helpers_1 = require("./url-helpers");
// This allows you to set environment variables in a `.env` file.
// This file needs to be in your working directory.
debug('stepzen:dotenv')(`loading .env from ${process.cwd()}, at cli/src/shared/constants.ts`);
dotenv.config();
const { STEPZEN_CONFIG_FILE: ENV_VAR_STEPZEN_CONFIG_FILE, STEPZEN_LOCAL_CONFIG_FILE: ENV_VAR_STEPZEN_LOCAL_CONFIG_FILE, } = process.env;
// Where your authentication details are stored locally
exports.STEPZEN_CONFIG_DIRECTORY = path.join(os.homedir(), '.stepzen');
exports.STEPZEN_LAST_UPDATE_CHECK_TIMESTAMP = path.join(exports.STEPZEN_CONFIG_DIRECTORY, 'last_update_check.timestamp');
exports.STEPZEN_CONFIG_FILE = ENV_VAR_STEPZEN_CONFIG_FILE || 'stepzen-config.yaml';
// The default zenctl2 deployment type.
exports.DEFAULT_STEPZEN_DEPLOYMENT_TYPE = 'stepzen';
exports.STEPZEN_LOCAL_CONFIG_FILE = ENV_VAR_STEPZEN_LOCAL_CONFIG_FILE || 'stepzen-config.local.yaml';
exports.STEPZEN_HISTORY_DIRECTORY = path.join(exports.STEPZEN_CONFIG_DIRECTORY, 'history');
exports.STEPZEN_HISTORY_FILE = '{accounthash}.yaml.enc';
// The zenctl URL. Override with the env var `STEPZEN_SERVER_URL`
exports.DEFAULT_STEPZEN_SERVER_URL = 'https://{account}.stepzen.io';
// Paths to the endpoints used (only for tests)
exports.ADMIN_DEPLOY_URL = '/cli/admin/deploy';
exports.ADMIN_LIST_URL = '/cli/admin/list';
exports.ADMIN_UPLOAD_URL = '/cli/admin/upload';
exports.ADMIN_ACCOUNT_URL = '/cli/admin/account';
exports.ZENCTL2_URL = '/api/zenctl/__graphql';
exports.ZENCTL2_PUBLIC_ACCOUNT_URL = '/api/publicaccount/__graphql';
exports.INTROSPECTION_URL_PATH = '/api/graphql';
exports.DBINTROSPECTION_URL_PATH = '/graphql';
exports.DEFAULT_STEPZEN_JSON2SDL_SERVER_URL = 'https://stepzen-introspection.us-east-a.ibm.stepzen.net/api/graphql';
exports.DEFAULT_STEPZEN_DBINTROSPECTION_SERVER_URL = 'https://stepzen-introspection.us-east-a.ibm.stepzen.net/graphql';
// override with process.env.STEPZEN_DOCKER_IMAGE
exports.DEFAULT_STEPZEN_DOCKER_IMAGE = 'icr.io/stepzen/stepzen';
// override with process.env.STEPZEN_DOCKER_TAG
exports.DEFAULT_STEPZEN_DOCKER_TAG = 'production';
exports.STEPZEN_CONTAINER_NETWORK = 'stepzen-network';
exports.STEPZEN_CONTAINER_NAME = 'stepzen-local';
exports.STEPZEN_AUTODB_CONTAINER_NAME = 'stepzen-metadata';
exports.STEPZEN_AUTODB_IMAGE = 'postgres:14';
exports.STEPZEN_AUTODB_DATABASE = 'stepzen-auto-metadata-db';
exports.STEPZEN_AUTODB_USER = 'stepzen-auto-metadata-user';
exports.STEPZEN_AUTODB_PASSWORD = 'stepzen-auto-metadata-password';
exports.STEPZEN_AUTODB_DSN = `postgres://${exports.STEPZEN_AUTODB_USER}:${exports.STEPZEN_AUTODB_PASSWORD}@${exports.STEPZEN_AUTODB_CONTAINER_NAME}:5432/${exports.STEPZEN_AUTODB_DATABASE}`;
exports.STEPZEN_DISCORD_URL = 'https://discord.gg/9k2VdPn2FR';
exports.DETECT_NAME_CONFLICTS = 'STEPZEN_DETECT_NAME_CONFLICTS';
exports.ENABLE_PRESTO_IMPORT = 'STEPZEN_ENABLE_PRESTO_IMPORT';
/**
 * Gets the "deployment type" of the StepZen service instance for the current
 * account, e.g. `stepzen`, `steprz` or `local`.
 *
 * Match order: environment variable `STEPZEN_DEPLOYMENT_TYPE`,
 * passed configuration object, hardcoded default.
 *
 * @param {*} config configuration object
 * @returns {*} deployment type
 */
const getDeploymentType = (config) => {
    return (process.env.STEPZEN_DEPLOYMENT_TYPE ||
        (config.serviceInstance &&
            'deploymentType' in config.serviceInstance &&
            config.serviceInstance.deploymentType) ||
        exports.DEFAULT_STEPZEN_DEPLOYMENT_TYPE);
};
exports.getDeploymentType = getDeploymentType;
/**
 * Gets the (external) zenctl v1 URL template (i.e. potentially containing an
 * `{account}` token to be replaced), e.g. https://{account}.stepzen.io
 *
 * Match order: environment variable `STEPZEN_SERVER_URL`,
 * passed configuration object, hardcoded default.
 *
 * @param {*} config configuration object
 * @returns {*} zenctl v1 URL template
 */
const getZenCtlUrlTemplate = (config) => {
    return (process.env.STEPZEN_SERVER_URL ||
        (config.serviceInstance &&
            'zenctl' in config.serviceInstance &&
            config.serviceInstance.zenctl) ||
        exports.DEFAULT_STEPZEN_SERVER_URL);
};
exports.getZenCtlUrlTemplate = getZenCtlUrlTemplate;
/**
 * Gets the (external) zenserv URL template (i.e. potentially containing an
 * `{account}` token to be replaced), e.g.
 * https://{account}.stepzen.net or http://localhost:9000.
 *
 * Match order: environment variable `STEPZEN_SERVER_URL` (with `.io` --> `.net`),
 * passed configuration object, hardcoded default.
 *
 * @param {*} config configuration object
 * @returns {*} zenserv URL template
 */
const getZenServUrlTemplate = (config) => {
    let inferredZenServ;
    if (config.serviceInstance &&
        'zenctl2' in config.serviceInstance &&
        config.serviceInstance.zenctl2) {
        try {
            const parsedUrl = new URL(config.serviceInstance.zenctl2);
            const hostname = parsedUrl.hostname.startsWith('stepzen.')
                ? `{account}.${parsedUrl.hostname.substring('stepzen.'.length)}`
                : parsedUrl.hostname;
            inferredZenServ = `${parsedUrl.protocol}//${hostname}${parsedUrl.port ? `:${parsedUrl.port}` : ''}`;
        }
        catch (error) {
            // ignore the exception
            debug('stepzen:constants')(`failed to parse zenctl2 value "${config.serviceInstance.zenctl2}" as a URL in getZenServUrlTemplate():` +
                error);
        }
    }
    let localZenServ;
    if ((0, exports.getDeploymentType)(config) === 'local') {
        localZenServ = 'http://127.0.0.1:9000';
    }
    const urlTemplate = process.env.STEPZEN_SERVER_URL ||
        inferredZenServ ||
        localZenServ ||
        exports.DEFAULT_STEPZEN_SERVER_URL;
    return urlTemplate.replace('.io', '.net');
};
exports.getZenServUrlTemplate = getZenServUrlTemplate;
/**
 * Gets the (external) zenctl v1 URL for the current account, e.g.
 * https://fakefish.stepzen.io or http://localhost:8080.
 *
 * Match order: environment variable `STEPZEN_SERVER_URL`,
 * passed configuration object, hardcoded default.
 *
 * @param {*} config configuration object
 * @returns {*} zenctl v1 URL
 */
const getZenCtlUrl = (config) => {
    const urlTemplate = (0, exports.getZenCtlUrlTemplate)(config);
    return urlTemplate.replace('{account}', config.account);
};
exports.getZenCtlUrl = getZenCtlUrl;
/**
 * Gets the (external) zenctl v2 URL for the current account, e.g.
 * https://stepzen.stepzen.net/api/zenctl/__graphql or
 * http://localhost:8080/api/zenctl/__graphql.
 *
 * Match order: environment variable `STEPZEN_ZENCTL_API_URL`,
 * passed configuration object, hardcoded default.
 *
 * @param {*} config configuration object
 * @returns {*} zenctl v2 URL
 */
const getZenCtl2Url = (config) => {
    // Since zenctl v2 API is a GraphQL endpoint in the `stepzen` account,
    // it can be constructed from a zenserv URL.
    const defaultZenCtl2Url = (0, exports.getZenServUrlTemplate)(config).replace('{account}', 'stepzen');
    const url = process.env.STEPZEN_ZENCTL_API_URL ||
        (config.serviceInstance &&
            'zenctl2' in config.serviceInstance &&
            config.serviceInstance.zenctl2) ||
        defaultZenCtl2Url;
    return (0, url_helpers_1.appendPathnameIfEmpty)(url, 'api/zenctl/__graphql');
};
exports.getZenCtl2Url = getZenCtl2Url;
/**
 * Gets the (external) zenserv URL for the current account, e.g.
 * https://fakefish.stepzen.net or http://localhost:8080.
 *
 * Match order: environment variable `STEPZEN_SERVER_URL` (with `.io` --> `.net`),
 * passed configuration object, hardcoded default.
 *
 * @param {*} config configuration object
 * @returns {*} zenserv URL
 */
const getZenServUrl = (config) => {
    const urlTemplate = (0, exports.getZenServUrlTemplate)(config);
    return urlTemplate.replace('{account}', config.account);
};
exports.getZenServUrl = getZenServUrl;
/**
 * Gets the domain name of the StepZen service instance (with or without the
 * port). E.g. `stepzen.net`, `steprz.net`, `localhost:9000`,
 * `us-east-a.ibm.stepzen.net`, etc
 *
 * @param {*} configuration machine configuration
 * @param {*} options optionally include the port
 * @returns {*} zenserv URL
 */
const getZenServDomain = (configuration, options = { includePort: true }) => {
    const property = options.includePort
        ? 'host'
        : 'hostname';
    return configuration.serviceInstance &&
        'zenctl2' in configuration.serviceInstance
        ? new URL((0, exports.getZenCtl2Url)(configuration))[property].replace(/^stepzen\./, '')
        : new URL((0, exports.getZenCtlUrlTemplate)(configuration))[property]
            .replace('{account}.', '')
            .replace(/\.io$/, '.net');
};
exports.getZenServDomain = getZenServDomain;
/**
 * Gets the introspection service URL. Match order: environment variable
 * `STEPZEN_JSON2SDL_SERVER_URL`, passed configuration object, hardcoded
 * default.
 *
 * @param {*} config configuration object
 * @returns {*} introspection service URL
 */
const getIntrospectionUrl = (config) => {
    const url = process.env.STEPZEN_JSON2SDL_SERVER_URL ||
        config.serviceInstance?.introspection ||
        exports.DEFAULT_STEPZEN_JSON2SDL_SERVER_URL;
    return (0, url_helpers_1.appendPathnameIfEmpty)(url, exports.INTROSPECTION_URL_PATH);
};
exports.getIntrospectionUrl = getIntrospectionUrl;
/**
 * Gets the database introspection service URL. Match order: environment
 * variable `STEPZEN_DBINTROSPECTION_SERVER_URL`, passed configuration
 * object, hardcoded default.
 *
 * @param {*} config configuration object
 * @returns {*} database introspection service URL
 */
const getDBIntrospectionUrl = (config) => {
    const url = process.env.STEPZEN_DBINTROSPECTION_SERVER_URL ||
        config.serviceInstance?.dbintrospection ||
        exports.DEFAULT_STEPZEN_DBINTROSPECTION_SERVER_URL;
    return (0, url_helpers_1.appendPathnameIfEmpty)(url, exports.DBINTROSPECTION_URL_PATH);
};
exports.getDBIntrospectionUrl = getDBIntrospectionUrl;
//# sourceMappingURL=constants.js.map