"use strict";
// Copyright IBM Corp. 2020, 2024
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSdkClient = exports.ensureValidCredentials = void 0;
const account_1 = require("./commands-v2/account");
const delete_1 = require("./commands-v2/delete");
const deploy_1 = require("./commands-v2/deploy");
const list_1 = require("./commands-v2/list");
const getPublicAccount_1 = require("./commands-v2/getPublicAccount");
const payloads_1 = require("./shared/payloads");
const ensureValidCredentials = async (auth, sdkConfig) => {
    let credentials;
    if ('publicAccountToken' in auth) {
        // create an anonymous account and use it to initialize an SDK client instance
        const { data, error } = await (0, getPublicAccount_1.default)({
            token: auth.publicAccountToken,
            deploymentType: auth.deploymentType,
            sdkConfig,
        });
        if (error) {
            throw new Error(`An unexpected error occurred: ${error.message}`);
        }
        credentials = data;
    }
    else {
        // use the provided account to initialize an SDK client instance
        const { data, error } = await (0, account_1.default)({
            account: auth.account,
            adminKey: auth.adminKey,
            deploymentType: auth.deploymentType,
            sdkConfig,
        });
        if (error) {
            throw new Error(error.message);
        }
        credentials = data;
    }
    return credentials;
};
exports.ensureValidCredentials = ensureValidCredentials;
const createSdkClient = async (auth, sdkConfig) => {
    const credentials = await (0, exports.ensureValidCredentials)(auth, sdkConfig);
    return {
        get credentials() {
            // always return a copy to avoid accidential modification by the caller
            return { ...credentials };
        },
        /**
         * Delete a GraphQL endpoint at StepZen.
         *
         * @param folder - folder name (e.g. `api`); will be a part of the endpoint URL
         * @param name - endpoint name (e.g. `users`); will be a part of the endpoint URL
         * @returns details of the deleted endpoint
         */
        delete: async ({ folder, name }) => {
            return (0, delete_1.default)({
                account: credentials.account,
                adminKey: credentials.adminKey,
                deploymentType: credentials.deploymentType,
                folder: folder,
                name: name,
                sdkConfig,
            });
        },
        /**
         * Create or update a GraphQL endpoint at StepZen.
         * The URL of the endpoint is formed as {StepZen instance URL}/{folder}/{name}/__graphql
         * e.g. https://account.stepzen.net/api/users/__graphql
         *
         * @param folder - folder name (e.g. `api`); will be a part of the endpoint URL
         * @param name - endpoint name (e.g. `users`); will be a part of the endpoint URL
         * @param directory - full path to a GraphQL schema directory (should have `index.graphql` in it)
         * @param config - full path to a config `.yml` file
         * @param public - whether or not to allow public access to the endpoint (`false` by default)
         * @returns details of the created / updated endpoint
         */
        deploy: async ({ folder, name, directory, config, public: _public = false, }) => {
            return (0, deploy_1.default)({
                account: credentials.account,
                adminKey: credentials.adminKey,
                deploymentType: credentials.deploymentType,
                endpointName: name,
                endpointType: 'dev',
                folderName: folder,
                public: _public,
                schemaFiles: (0, payloads_1.generateSchemaFilesPayload)(directory),
                configuration: await (0, payloads_1.generateConfigurationPayload)(config),
                sdkConfig,
            });
        },
        list: {
            /**
             * List deployed endpoints.
             *
             * @returns list of deployed endpoints
             */
            endpoints: () => {
                return (0, list_1.default)({
                    account: credentials.account,
                    adminKey: credentials.adminKey,
                    deploymentType: credentials.deploymentType,
                    sdkConfig,
                });
            },
        },
    };
};
exports.createSdkClient = createSdkClient;
//# sourceMappingURL=client-v2.js.map