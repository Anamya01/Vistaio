import { MachineConfiguration, LoggedInMachineConfiguration } from './types';
export declare const STEPZEN_CONFIG_DIRECTORY: string;
export declare const STEPZEN_LAST_UPDATE_CHECK_TIMESTAMP: string;
export declare const STEPZEN_CONFIG_FILE: string;
export declare const DEFAULT_STEPZEN_DEPLOYMENT_TYPE = "stepzen";
export declare const STEPZEN_LOCAL_CONFIG_FILE: string;
export declare const STEPZEN_HISTORY_DIRECTORY: string;
export declare const STEPZEN_HISTORY_FILE = "{accounthash}.yaml.enc";
export declare const DEFAULT_STEPZEN_SERVER_URL = "https://{account}.stepzen.io";
export declare const ADMIN_DEPLOY_URL = "/cli/admin/deploy";
export declare const ADMIN_LIST_URL = "/cli/admin/list";
export declare const ADMIN_UPLOAD_URL = "/cli/admin/upload";
export declare const ADMIN_ACCOUNT_URL = "/cli/admin/account";
export declare const ZENCTL2_URL = "/api/zenctl/__graphql";
export declare const ZENCTL2_PUBLIC_ACCOUNT_URL = "/api/publicaccount/__graphql";
export declare const INTROSPECTION_URL_PATH = "/api/graphql";
export declare const DBINTROSPECTION_URL_PATH = "/graphql";
export declare const DEFAULT_STEPZEN_JSON2SDL_SERVER_URL = "https://stepzen-introspection.us-east-a.ibm.stepzen.net/api/graphql";
export declare const DEFAULT_STEPZEN_DBINTROSPECTION_SERVER_URL = "https://stepzen-introspection.us-east-a.ibm.stepzen.net/graphql";
export declare const DEFAULT_STEPZEN_DOCKER_IMAGE = "icr.io/stepzen/stepzen";
export declare const DEFAULT_STEPZEN_DOCKER_TAG = "production";
export declare const STEPZEN_CONTAINER_NETWORK = "stepzen-network";
export declare const STEPZEN_CONTAINER_NAME = "stepzen-local";
export declare const STEPZEN_AUTODB_CONTAINER_NAME = "stepzen-metadata";
export declare const STEPZEN_AUTODB_IMAGE = "postgres:14";
export declare const STEPZEN_AUTODB_DATABASE = "stepzen-auto-metadata-db";
export declare const STEPZEN_AUTODB_USER = "stepzen-auto-metadata-user";
export declare const STEPZEN_AUTODB_PASSWORD = "stepzen-auto-metadata-password";
export declare const STEPZEN_AUTODB_DSN: string;
export declare const STEPZEN_DISCORD_URL = "https://discord.gg/9k2VdPn2FR";
export declare const DETECT_NAME_CONFLICTS = "STEPZEN_DETECT_NAME_CONFLICTS";
export declare const ENABLE_PRESTO_IMPORT = "STEPZEN_ENABLE_PRESTO_IMPORT";
/**
 * Gets the "deployment type" of the StepZen service instance for the current
 * account, e.g. `stepzen`, `steprz` or `local`.
 *
 * Match order: environment variable `STEPZEN_DEPLOYMENT_TYPE`,
 * passed configuration object, hardcoded default.
 *
 * @param {*} config configuration object
 * @returns {*} deployment type
 */
export declare const getDeploymentType: (config: MachineConfiguration) => string;
/**
 * Gets the (external) zenctl v1 URL template (i.e. potentially containing an
 * `{account}` token to be replaced), e.g. https://{account}.stepzen.io
 *
 * Match order: environment variable `STEPZEN_SERVER_URL`,
 * passed configuration object, hardcoded default.
 *
 * @param {*} config configuration object
 * @returns {*} zenctl v1 URL template
 */
export declare const getZenCtlUrlTemplate: (config: MachineConfiguration) => string;
/**
 * Gets the (external) zenserv URL template (i.e. potentially containing an
 * `{account}` token to be replaced), e.g.
 * https://{account}.stepzen.net or http://localhost:9000.
 *
 * Match order: environment variable `STEPZEN_SERVER_URL` (with `.io` --> `.net`),
 * passed configuration object, hardcoded default.
 *
 * @param {*} config configuration object
 * @returns {*} zenserv URL template
 */
export declare const getZenServUrlTemplate: (config: MachineConfiguration) => string;
/**
 * Gets the (external) zenctl v1 URL for the current account, e.g.
 * https://fakefish.stepzen.io or http://localhost:8080.
 *
 * Match order: environment variable `STEPZEN_SERVER_URL`,
 * passed configuration object, hardcoded default.
 *
 * @param {*} config configuration object
 * @returns {*} zenctl v1 URL
 */
export declare const getZenCtlUrl: (config: LoggedInMachineConfiguration) => string;
/**
 * Gets the (external) zenctl v2 URL for the current account, e.g.
 * https://stepzen.stepzen.net/api/zenctl/__graphql or
 * http://localhost:8080/api/zenctl/__graphql.
 *
 * Match order: environment variable `STEPZEN_ZENCTL_API_URL`,
 * passed configuration object, hardcoded default.
 *
 * @param {*} config configuration object
 * @returns {*} zenctl v2 URL
 */
export declare const getZenCtl2Url: (config: MachineConfiguration) => string;
/**
 * Gets the (external) zenserv URL for the current account, e.g.
 * https://fakefish.stepzen.net or http://localhost:8080.
 *
 * Match order: environment variable `STEPZEN_SERVER_URL` (with `.io` --> `.net`),
 * passed configuration object, hardcoded default.
 *
 * @param {*} config configuration object
 * @returns {*} zenserv URL
 */
export declare const getZenServUrl: (config: LoggedInMachineConfiguration) => string;
/**
 * Gets the domain name of the StepZen service instance (with or without the
 * port). E.g. `stepzen.net`, `steprz.net`, `localhost:9000`,
 * `us-east-a.ibm.stepzen.net`, etc
 *
 * @param {*} configuration machine configuration
 * @param {*} options optionally include the port
 * @returns {*} zenserv URL
 */
export declare const getZenServDomain: (configuration: LoggedInMachineConfiguration, options?: {
    includePort?: boolean;
}) => string;
/**
 * Gets the introspection service URL. Match order: environment variable
 * `STEPZEN_JSON2SDL_SERVER_URL`, passed configuration object, hardcoded
 * default.
 *
 * @param {*} config configuration object
 * @returns {*} introspection service URL
 */
export declare const getIntrospectionUrl: (config: MachineConfiguration) => string;
/**
 * Gets the database introspection service URL. Match order: environment
 * variable `STEPZEN_DBINTROSPECTION_SERVER_URL`, passed configuration
 * object, hardcoded default.
 *
 * @param {*} config configuration object
 * @returns {*} database introspection service URL
 */
export declare const getDBIntrospectionUrl: (config: MachineConfiguration) => string;
//# sourceMappingURL=constants.d.ts.map