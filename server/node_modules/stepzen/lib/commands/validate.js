"use strict";
// Copyright IBM Corp. 2020, 2024
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const core_1 = require("@oclif/core");
const errors_1 = require("@oclif/core/lib/errors");
const transpiler_1 = require("@stepzen/transpiler");
const utils_1 = require("../shared/utils");
const zen_command_1 = require("../shared/zen-command");
const rmtemp_1 = require("../shared/rmtemp");
class Validate extends zen_command_1.default {
    async run() {
        const { args } = await this.parse(Validate);
        const folder = (0, utils_1.getDirectory)(args.folder);
        try {
            const schema = (0, transpiler_1.stitch)(folder);
            try {
                (0, transpiler_1.validate)(schema, {
                    extensions: await (0, utils_1.getStepZenExtensions)(),
                });
            }
            finally {
                (0, rmtemp_1.rmtemp)(schema);
            }
        }
        catch (error) {
            core_1.ux.action.stop(chalk.red('fail'));
            throw new errors_1.CLIError(chalk.red(error));
        }
    }
}
exports.default = Validate;
Validate.description = 'Validate a GraphQL schema.';
Validate.hidden = true;
Validate.flags = {
    ...zen_command_1.default.flags,
};
Validate.args = {
    folder: core_1.Args.string({ required: true }),
};
//# sourceMappingURL=validate.js.map