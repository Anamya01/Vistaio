/// <reference types="node" />
import * as inquirer from 'inquirer';
import type { DistinctQuestion } from 'inquirer';
interface HistoryKey {
    historyFile: string;
    key: Buffer;
    initVector: Buffer;
}
export declare let historyKey: HistoryKey | undefined;
export declare const clearHistoryKey: () => void;
export declare const writeLastAnswers: (answers: any) => Promise<void>;
export declare const prompt: <T extends inquirer.Answers>(namespace: string, questions: inquirer.QuestionCollection<T>, initialAnswers?: Partial<T> | undefined) => Promise<T>;
export declare const overrideDefaults: <Options extends inquirer.Answers>(questions: inquirer.DistinctQuestion<Options>[], defaultAnswers: Partial<Options>) => inquirer.DistinctQuestion<Options>[];
export {};
//# sourceMappingURL=inquirer.d.ts.map