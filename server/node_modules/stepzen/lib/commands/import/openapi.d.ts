import { ImportCommandBase } from '../../generate/import-command';
import type { CommonImportOptions } from '../../generate/import-command';
import type { OpenApi2SdlOptions } from '../../generate/openapi2sdl';
import { Workspace } from '../../shared/types';
declare type InteractiveOpenApi2SdlOptions = Pick<OpenApi2SdlOptions, 'openapi'>;
declare type OpenApiAnswers = {
    openapi: string;
};
export default class ImportOpenApi extends ImportCommandBase {
    static description: string;
    get source(): "openapi";
    static hidden: boolean;
    static flags: {
        dir: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        silent: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        name: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        overwrite: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        help: import("@oclif/core/lib/interfaces").BooleanFlag<void>;
        'non-interactive': import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
    };
    static args: {
        openapi: import("@oclif/core/lib/interfaces/parser").Arg<string | undefined, Record<string, unknown>>;
    };
    ensureOpenApiSpecFile(openapi: string, basedir: string): void;
    protected import(commonOptions: CommonImportOptions, workspace: Workspace): Promise<import("../../shared/types").ErrorOr<import("../../generate/helpers").IntrospectionServiceResponse, {
        message: string;
    }>>;
    getImportOptionsInteractively(defaults: Partial<OpenApiAnswers> | undefined, basedir: string): Promise<InteractiveOpenApi2SdlOptions>;
}
export {};
//# sourceMappingURL=openapi.d.ts.map