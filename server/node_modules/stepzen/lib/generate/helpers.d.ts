import type { HeaderInput } from '../shared/header';
import type { ErrorOr } from '../shared/types';
export declare type IntrospectionServiceQuery = {
    operation: string;
    variables: {
        [id: string]: {
            type: string;
            value: any | null;
        };
    };
};
export declare type IntrospectionServiceResponse = {
    sdl: string;
    config?: string;
};
export declare const queryIntrospectionService: (serverUrl: string, query: IntrospectionServiceQuery) => Promise<ErrorOr<IntrospectionServiceResponse>>;
export declare const writeSdlAndConfig: ({ name, source, mergeTypes, onConflict, response, }: {
    name: string;
    source: string;
    mergeTypes?: boolean | undefined;
    onConflict: 'overwrite' | 'append';
    response: IntrospectionServiceResponse;
}) => Promise<{
    outPath: string;
}>;
export declare const parseHeaderFlags: (headerFlagValues?: string[], headerParamFlagValues?: string[]) => HeaderInput[];
//# sourceMappingURL=helpers.d.ts.map