import { SDKConfigurationV2 } from './shared/types';
export declare const initV2: (sdkConfig: SDKConfigurationV2) => {
    verify: (account: string, adminkey: string, deploymentType: string) => Promise<boolean>;
    client: (auth: {
        account: string;
        adminKey: string;
        deploymentType: string;
    } | {
        publicAccountToken: string;
        deploymentType: string;
    }) => Promise<{
        readonly credentials: import("./shared/types").StepZenCredentialsV2;
        delete: ({ folder, name }: {
            folder: string;
            name: string;
        }) => Promise<import("./shared/types").ZenCtlResponseV2<import("./shared/types").StepZenDeleteV2[]>>;
        deploy: ({ folder, name, directory, config, public: _public, }: {
            folder: string;
            name: string;
            directory: string;
            config?: string | undefined;
            public?: boolean | undefined;
        }) => Promise<import("./shared/types").ZenCtlResponseV2<import("./shared/types").StepZenEndpointV2>>;
        list: {
            endpoints: () => Promise<import("./shared/types").ZenCtlResponseV2<import("./shared/types").StepZenEndpointV2[]>>;
        };
    }>;
    readonly userAgent: string;
};
declare type PromisedType<T> = T extends Promise<infer U> ? U : T;
export declare type SDKV2 = ReturnType<typeof initV2>;
export declare type SDKClientV2 = PromisedType<ReturnType<SDKV2['client']>>;
export {};
//# sourceMappingURL=init-v2.d.ts.map