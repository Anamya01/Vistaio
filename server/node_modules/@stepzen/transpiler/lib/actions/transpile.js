"use strict";
// Copyright IBM Corp. 2020, 2024
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const dotenv = require("dotenv");
const debug = require("debug");
const fs = require("fs");
const glob = require("glob");
const path = require("path");
const yaml = require("yaml");
const print_1 = require("../actions/print");
const stitch_1 = require("../actions/stitch");
const configure_1 = require("./configure");
const config_1 = require("../mutations/config");
const rmtemp_1 = require("../utils/rmtemp");
/**
 * Read a StepZen workspace directory, apply StepZen-specific schema and config
 * transformations, and return its effective GraphQL schema and configuration
 * as in-memory strings.
 *
 * @param {*} source absolute path to a schema root folder
 * @return {*} schema, configuration, and a "transpiled" flag indicating
 *            whether or not any StepZen-specific transformations have actually
 *            been applied.
 */
exports.default = async (source) => {
    // Ensure source and output directories exist
    if (!fs.existsSync(source)) {
        throw new Error(`Cannot find source directory ${source}`);
    }
    // Load env vars, from working and source directories
    debug('stepzen:dotenv')(`loading .env from ${process.cwd()}, at transpiler/src/actions/transpile.ts:24`);
    dotenv.config();
    debug('stepzen:dotenv')(`loading .env from ${path.resolve(source)}` +
        `, at transpiler/src/actions/transpile.ts:29`);
    dotenv.config({ path: path.resolve(source, '.env') });
    // State of whether we've transpiled or not
    let transpiledConfig = false;
    // See whether to transpile config
    let config = await (0, configure_1.default)(source, true);
    const configCopy = config;
    if (config) {
        for await (const mutation of config_1.default) {
            config = await mutation(config);
        }
    }
    if (configCopy !== config) {
        transpiledConfig = true;
    }
    // See whether to transpile GraphQL
    const graphqlFiles = glob.sync('**/*.graphql', { cwd: source });
    let schema = '';
    if (graphqlFiles.length > 0) {
        const stitched = await (0, stitch_1.default)(source);
        try {
            const index = path.join(stitched, 'index.graphql');
            const graphql = fs.readFileSync(index, 'utf8');
            schema = (0, print_1.default)((0, graphql_1.parse)(graphql));
        }
        finally {
            (0, rmtemp_1.rmtemp)(stitched);
        }
    }
    return {
        config: yaml.stringify(config),
        schema,
        transpiled: transpiledConfig,
    };
};
//# sourceMappingURL=transpile.js.map